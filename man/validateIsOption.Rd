% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/validation-options.R
\name{validateIsOption}
\alias{validateIsOption}
\title{Validate Options Against Specifications}
\usage{
validateIsOption(options, validOptions)
}
\arguments{
\item{options}{A list of options to validate.}

\item{validOptions}{A list specifying validation rules for each option.
Each entry should either be:
\itemize{
\item A spec object created with \code{integerOption()}, \code{characterOption()}, etc. (recommended)
\item A list with fields: \code{type}, \code{valueRange}, \code{allowedValues}, \code{nullAllowed}, \code{naAllowed} (legacy)
}}
}
\value{
Returns \code{NULL} invisibly if all validations pass. Stops with detailed error
message listing all failures if any validation fails.
}
\description{
Validates a list of options against specified validation rules. Supports both
modern spec constructors (\code{integerOption()}, etc.) and legacy list format for
backward compatibility.
}
\details{
The function validates each option in \code{validOptions} using the corresponding
value from \code{options}. Modern spec objects created with constructor functions like
\code{integerOption()} are recommended as they provide better IDE support and validation.
Legacy list format is still supported for backward compatibility and is automatically
converted internally.
}
\examples{
# Modern API (recommended)
validOptions <- list(
  maxIterations = integerOption(min = 1L, max = 10000L),
  method = characterOption(allowedValues = c("a", "b")),
  threshold = numericOption(min = 0, max = 1, nullAllowed = TRUE)
)

options <- list(maxIterations = 100L, method = "a", threshold = 0.05)
validateIsOption(options, validOptions)

# Legacy format (still supported)
validOptions <- list(
  maxIterations = list(type = "integer", valueRange = c(1L, 10000L))
)
validateIsOption(options, validOptions)

}
