% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/validation-options.R
\name{validateIsOption}
\alias{validateIsOption}
\title{Validate Options Against Specifications}
\usage{
validateIsOption(options, validOptions)
}
\arguments{
\item{options}{A list of options to validate.}

\item{validOptions}{A list specifying validation rules for each option. Each
entry should either be:
\itemize{
\item A spec object created with \code{integerOption()}, \code{characterOption()}, etc.
\item A list with fields: \code{type}, \code{valueRange}, \code{allowedValues}, \code{nullAllowed},
\code{naAllowed}
}}
}
\value{
Returns \code{NULL} invisibly if all validations pass. Stops with detailed
error message listing all failures if any validation fails.
}
\description{
Validates a list of options against specified validation rules. Supports both
modern spec constructors (\code{integerOption()}, etc.) and legacy list format for
backward compatibility.
}
\details{
Each entry in \code{validOptions} is validated against the matching value
from \code{options}. Spec objects created with constructors (e.g.,
\code{integerOption()}) are recommended because they express intent clearly and
work well with IDEs. For backward compatibility, legacy list-based specs
are still accepted and are automatically normalized to \code{optionSpec} before
validation.
}
\examples{
validOptions <- list(
  maxIterations = integerOption(min = 1L, max = 10000L),
  method = characterOption(allowedValues = c("a", "b")),
  threshold = numericOption(min = 0, max = 1, nullAllowed = TRUE)
)

options <- list(maxIterations = 100L, method = "a", threshold = 0.05)
validateIsOption(options, validOptions)

}
