% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/error-checks.R
\name{isIncluded}
\alias{isIncluded}
\title{Check if a vector of values is included in another vector of values}
\usage{
isIncluded(values, parentValues)
}
\arguments{
\item{values}{A vector of values.}

\item{parentValues}{A vector of values where \code{values} are checked for
inclusion.}
}
\value{
Returns \code{TRUE} if the value or \strong{all} \code{values} (if it's a vector) are
present in the \code{parentValues}; \code{FALSE} otherwise.
}
\description{
A helper function to check if a vector of values is included in another
vector of values.

Note that arguments can also be of length \code{1} (e.g. \code{values = "x"}). But
whether this constitutes a vector, and thus a valid function argument,
depends on the \strong{class} of the object. For all built-in classes in R
(numeric, character, logical, etc.), a single value is a valid vector (e.g.
\code{"x"} is a vector of character type, as shown by \code{is.vector("x")}).

But, for other classes (like \code{R6}), you will first need to convert a single
value to a vector. For example, if \code{myClass} object is an instance of \code{R6}
class, you can't enter \code{values = myClass}, since a single \code{R6} object is not
a vector. You will instead need to use \code{values = c(myClass)} or \code{values = list(myClass)}.
}
\examples{
# check if a column is present in dataframe
A <- data.frame(
  col1 = c(1, 2, 3),
  col2 = c(4, 5, 6),
  col3 = c(7, 8, 9)
)
isIncluded("col3", names(A)) # TRUE

# check if single element is present in a vector (atomic or non-atomic)
isIncluded("x", list("w", "x", 1, 2)) # TRUE
isIncluded("x", c("w", "a", "y")) # FALSE

# check if **all** values (if it's a vector) are contained in parent values
isIncluded(c("x", "y"), c("a", "y", "b", "x")) # TRUE
isIncluded(list("x", 1), list("a", "b", "x", 1)) # TRUE
isIncluded(c("x", "y"), c("a", "b", "x")) # FALSE
isIncluded(list("x", 1), list("a", "b", "x")) # FALSE
}
