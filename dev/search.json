[{"path":[]},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement michael@design2code.ca. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.1, available https://www.contributor-covenant.org/version/2/1/code_of_conduct.html. Community Impact Guidelines inspired [Mozilla’s code conduct enforcement ladder][https://github.com/mozilla/inclusion]. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 2, June 1991Copyright © 1989, 1991 Free Software Foundation, Inc.,51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"licenses software designed take away freedom share change . contrast, GNU General Public License intended guarantee freedom share change free software–make sure software free users. General Public License applies Free Software Foundation’s software program whose authors commit using . (Free Software Foundation software covered GNU Lesser General Public License instead.) can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge service wish), receive source code can get want , can change software use pieces new free programs; know can things. protect rights, need make restrictions forbid anyone deny rights ask surrender rights. restrictions translate certain responsibilities distribute copies software, modify . example, distribute copies program, whether gratis fee, must give recipients rights . must make sure , , receive can get source code. must show terms know rights. protect rights two steps: (1) copyright software, (2) offer license gives legal permission copy, distribute /modify software. Also, author’s protection , want make certain everyone understands warranty free software. software modified someone else passed , want recipients know original, problems introduced others reflect original authors’ reputations. Finally, free program threatened constantly software patents. wish avoid danger redistributors free program individually obtain patent licenses, effect making program proprietary. prevent , made clear patent must licensed everyone’s free use licensed . precise terms conditions copying, distribution modification follow.","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/LICENSE.html","id":"terms-and-conditions-for-copying-distribution-and-modification","dir":"","previous_headings":"","what":"TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION","title":"GNU General Public License","text":"0. License applies program work contains notice placed copyright holder saying may distributed terms General Public License. “Program”, , refers program work, “work based Program” means either Program derivative work copyright law: say, work containing Program portion , either verbatim modifications /translated another language. (Hereinafter, translation included without limitation term “modification”.) licensee addressed “”. Activities copying, distribution modification covered License; outside scope. act running Program restricted, output Program covered contents constitute work based Program (independent made running Program). Whether true depends Program . 1. may copy distribute verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice disclaimer warranty; keep intact notices refer License absence warranty; give recipients Program copy License along Program. may charge fee physical act transferring copy, may option offer warranty protection exchange fee. 2. may modify copy copies Program portion , thus forming work based Program, copy distribute modifications work terms Section 1 , provided also meet conditions: ) must cause modified files carry prominent notices stating changed files date change. b) must cause work distribute publish, whole part contains derived Program part thereof, licensed whole charge third parties terms License. c) modified program normally reads commands interactively run, must cause , started running interactive use ordinary way, print display announcement including appropriate copyright notice notice warranty (else, saying provide warranty) users may redistribute program conditions, telling user view copy License. (Exception: Program interactive normally print announcement, work based Program required print announcement.) requirements apply modified work whole. identifiable sections work derived Program, can reasonably considered independent separate works , License, terms, apply sections distribute separate works. distribute sections part whole work based Program, distribution whole must terms License, whose permissions licensees extend entire whole, thus every part regardless wrote . Thus, intent section claim rights contest rights work written entirely ; rather, intent exercise right control distribution derivative collective works based Program. addition, mere aggregation another work based Program Program (work based Program) volume storage distribution medium bring work scope License. 3. may copy distribute Program (work based , Section 2) object code executable form terms Sections 1 2 provided also one following: ) Accompany complete corresponding machine-readable source code, must distributed terms Sections 1 2 medium customarily used software interchange; , b) Accompany written offer, valid least three years, give third party, charge cost physically performing source distribution, complete machine-readable copy corresponding source code, distributed terms Sections 1 2 medium customarily used software interchange; , c) Accompany information received offer distribute corresponding source code. (alternative allowed noncommercial distribution received program object code executable form offer, accord Subsection b .) source code work means preferred form work making modifications . executable work, complete source code means source code modules contains, plus associated interface definition files, plus scripts used control compilation installation executable. However, special exception, source code distributed need include anything normally distributed (either source binary form) major components (compiler, kernel, ) operating system executable runs, unless component accompanies executable. distribution executable object code made offering access copy designated place, offering equivalent access copy source code place counts distribution source code, even though third parties compelled copy source along object code. 4. may copy, modify, sublicense, distribute Program except expressly provided License. attempt otherwise copy, modify, sublicense distribute Program void, automatically terminate rights License. However, parties received copies, rights, License licenses terminated long parties remain full compliance. 5. required accept License, since signed . However, nothing else grants permission modify distribute Program derivative works. actions prohibited law accept License. Therefore, modifying distributing Program (work based Program), indicate acceptance License , terms conditions copying, distributing modifying Program works based . 6. time redistribute Program (work based Program), recipient automatically receives license original licensor copy, distribute modify Program subject terms conditions. may impose restrictions recipients’ exercise rights granted herein. responsible enforcing compliance third parties License. 7. , consequence court judgment allegation patent infringement reason (limited patent issues), conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. distribute satisfy simultaneously obligations License pertinent obligations, consequence may distribute Program . example, patent license permit royalty-free redistribution Program receive copies directly indirectly , way satisfy License refrain entirely distribution Program. portion section held invalid unenforceable particular circumstance, balance section intended apply section whole intended apply circumstances. purpose section induce infringe patents property right claims contest validity claims; section sole purpose protecting integrity free software distribution system, implemented public license practices. Many people made generous contributions wide range software distributed system reliance consistent application system; author/donor decide willing distribute software system licensee impose choice. section intended make thoroughly clear believed consequence rest License. 8. distribution /use Program restricted certain countries either patents copyrighted interfaces, original copyright holder places Program License may add explicit geographical distribution limitation excluding countries, distribution permitted among countries thus excluded. case, License incorporates limitation written body License. 9. Free Software Foundation may publish revised /new versions General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies version number License applies “later version”, option following terms conditions either version later version published Free Software Foundation. Program specify version number License, may choose version ever published Free Software Foundation. 10. wish incorporate parts Program free programs whose distribution conditions different, write author ask permission. software copyrighted Free Software Foundation, write Free Software Foundation; sometimes make exceptions . decision guided two goals preserving free status derivatives free software promoting sharing reuse software generally.","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/LICENSE.html","id":"no-warranty","dir":"","previous_headings":"","what":"NO WARRANTY","title":"GNU General Public License","text":"11. PROGRAM LICENSED FREE CHARGE, WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION. 12. EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MAY MODIFY /REDISTRIBUTE PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES. END TERMS CONDITIONS","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively convey exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program interactive, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, commands use may called something show w show c; even mouse-clicks menu items–whatever suits program. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. sample; alter names: General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA. Gnomovision version 69, Copyright (C) year name of author Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'. This is free software, and you are welcome to redistribute it under certain conditions; type `show c' for details. Yoyodyne, Inc., hereby disclaims all copyright interest in the program `Gnomovision' (which makes passes at compilers) written by James Hacker.  <signature of Ty Coon>, 1 April 1989 Ty Coon, President of Vice"},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/articles/logger.html","id":"get-started","dir":"Articles","previous_headings":"","what":"Get started","title":"Logging utils","text":"function setLogFolder() aims initializing logging system. argument logFolder, NULL default. logFolder=NULL, log file created, logs displayed console. logFolder set valid folder path, create log.txt file folder, record log utilities defined . example sets log folder within sub-directory test-logs current working directory. Thus, log file located test-logs/log.txt 💡 Note can use setLogFolder() without argument stop logging. log utilities define 4 levels logging . log message associated time stamp level logging. *1 Debug: debugging purposes, content displayed console *2 Info: general information, displayed blue *3 Warning: warnings, displayed yellow *4 Error: errors, displayed red Check content log file test-logs/log.txt see logged messages.","code":"dir.create(\"test-logs\") setLogFolder(\"test-logs\") logDebug(\"Message for debugging purposes\") logInfo(\"Message for general information\") #> ℹ Info [25/07/2025 - 12:36:12]:  Message for general information logWarning(\"Warning message\") #> ! Warning [25/07/2025 - 12:36:12]:  Warning message logError(\"Error message\") #> ✖ Error [25/07/2025 - 12:36:12]:  Error message readLines(\"test-logs/log.txt\") #> [1] \"DEBUG [2025-07-25 12:36:12] Message for debugging purposes\" #> [2] \"INFO [2025-07-25 12:36:12] Message for general information\" #> [3] \"WARN [2025-07-25 12:36:12] Warning message\"                 #> [4] \"ERROR [2025-07-25 12:36:12] Error message\""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/articles/logger.html","id":"taking-advantage-of-glue-and-cli-formatting","dir":"Articles","previous_headings":"","what":"Taking advantage of glue and cli formatting","title":"Logging utils","text":"logging utilities designed work {glue} {cli} packages format messages. Especially, logInfo() function includes second argument type allows specify type message want log. first example using glue/cli formatting: content log appended test-logs/log.txt removing formatting displayed console. package ospsuite.utils also provides wrapper store cli formatted messages: cliFormat(). 💡 Note , array messages provided log utilities, expected first element usually information, warning, error message subsequent elements additional information aims helping refine troubleshoot first message. Thus, indicated arrows console logs. second example using cliFormat(), whose warning provide information class length variable x: content log also appended test-logs/log.txt removing formatting displayed console.","code":"logInfo(\"A logging example\", type = \"h1\") #>  #> ── A logging example ─────────────────────────────────────────────────────────── # tic() and toc() functions were implemented in ospsuite.utils t0 <- tic() logInfo(\"Some {.strong useful} information taking advantage of {.code logger}\") #> ℹ Info [25/07/2025 - 12:36:12]:  Some useful information taking advantage of `logger` Sys.sleep(2) logInfo(\"First logging example done [{.field {toc(t0, 's')}}]\", type = \"success\") #> ✔ Info [25/07/2025 - 12:36:14]:  First logging example done [2.0 s] readLines(\"test-logs/log.txt\") #> [1] \"DEBUG [2025-07-25 12:36:12] Message for debugging purposes\"                      #> [2] \"INFO [2025-07-25 12:36:12] Message for general information\"                      #> [3] \"WARN [2025-07-25 12:36:12] Warning message\"                                      #> [4] \"ERROR [2025-07-25 12:36:12] Error message\"                                       #> [5] \"DEBUG [2025-07-25 12:36:12] A logging example\"                                   #> [6] \"INFO [2025-07-25 12:36:12] Some useful information taking advantage of `logger`\" #> [7] \"SUCCESS [2025-07-25 12:36:14] First logging example done [2.0 s]\" myWarning <- function(x) {   cliFormat(     \"Warning example about {.val x} !\",     \"{.val x} is of class {.code {class(x)}} and length {.strong {length(x)}}\",     \"The {length(x)} value{?s} of {.val x} {?is/are}: {.val {x}}\"   ) }  x <- 10 logWarning(myWarning(x)) #> ! Warning [25/07/2025 - 12:36:14]:  Warning example about \"x\" ! #> → \"x\" is of class `numeric` and length 1 #> → The 1 value of \"x\" is: 10  x <- letters[5:8] logWarning(myWarning(x)) #> ! Warning [25/07/2025 - 12:36:14]:  Warning example about \"x\" ! #> → \"x\" is of class `character` and length 4 #> → The 4 values of \"x\" are: \"e\", \"f\", \"g\", and \"h\" readLines(\"test-logs/log.txt\") #>  [1] \"DEBUG [2025-07-25 12:36:12] Message for debugging purposes\"                      #>  [2] \"INFO [2025-07-25 12:36:12] Message for general information\"                      #>  [3] \"WARN [2025-07-25 12:36:12] Warning message\"                                      #>  [4] \"ERROR [2025-07-25 12:36:12] Error message\"                                       #>  [5] \"DEBUG [2025-07-25 12:36:12] A logging example\"                                   #>  [6] \"INFO [2025-07-25 12:36:12] Some useful information taking advantage of `logger`\" #>  [7] \"SUCCESS [2025-07-25 12:36:14] First logging example done [2.0 s]\"                #>  [8] \"WARN [2025-07-25 12:36:14] Warning example about \\\"x\\\" !\"                        #>  [9] \"\\\"x\\\" is of class `numeric` and length 1\"                                        #> [10] \"The 1 value of \\\"x\\\" is: 10\"                                                     #> [11] \"WARN [2025-07-25 12:36:14] Warning example about \\\"x\\\" !\"                        #> [12] \"\\\"x\\\" is of class `character` and length 4\"                                      #> [13] \"The 4 values of \\\"x\\\" are: \\\"e\\\", \\\"f\\\", \\\"g\\\", and \\\"h\\\"\""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/articles/logger.html","id":"catching-messages","dir":"Articles","previous_headings":"","what":"Catching messages","title":"Logging utils","text":"logging utilities also provide way catch information provided message(), warning() stop(). can use logCatch() function catch messages log accordingly. content caught logCatch() also appended test-logs/log.txt removing formatting displayed console.","code":"logCatch({   logInfo(\"Testing {.fn logCatch}\", type = \"h1\")   x <- c(     \"This is a string\",     \"This is another string\",     \"This is a third string\"   )   warning(cliFormat(     \"Warning about {.val x} !\",     \"{.val x} is of class {.code {class(x)}} and length {.strong {length(x)}}\",     \"The {length(x)} value{?s} of {.val x} {?is/are}: {.val {x}}\"   ))   logInfo(\"Warning message was caught\", type = \"success\") }) #>  #> ── Testing `logCatch()` ──────────────────────────────────────────────────────── #> ! Warning [25/07/2025 - 12:36:15]:  Warning about \"x\" ! #> → \"x\" is of class `character` and length 3 #> → The 3 values of \"x\" are: \"This is a string\", \"This is another string\", and \"This is a third string\" #> ✔ Info [25/07/2025 - 12:36:15]:  Warning message was caught readLines(\"test-logs/log.txt\") #>  [1] \"DEBUG [2025-07-25 12:36:12] Message for debugging purposes\"                                                  #>  [2] \"INFO [2025-07-25 12:36:12] Message for general information\"                                                  #>  [3] \"WARN [2025-07-25 12:36:12] Warning message\"                                                                  #>  [4] \"ERROR [2025-07-25 12:36:12] Error message\"                                                                   #>  [5] \"DEBUG [2025-07-25 12:36:12] A logging example\"                                                               #>  [6] \"INFO [2025-07-25 12:36:12] Some useful information taking advantage of `logger`\"                             #>  [7] \"SUCCESS [2025-07-25 12:36:14] First logging example done [2.0 s]\"                                            #>  [8] \"WARN [2025-07-25 12:36:14] Warning example about \\\"x\\\" !\"                                                    #>  [9] \"\\\"x\\\" is of class `numeric` and length 1\"                                                                    #> [10] \"The 1 value of \\\"x\\\" is: 10\"                                                                                 #> [11] \"WARN [2025-07-25 12:36:14] Warning example about \\\"x\\\" !\"                                                    #> [12] \"\\\"x\\\" is of class `character` and length 4\"                                                                  #> [13] \"The 4 values of \\\"x\\\" are: \\\"e\\\", \\\"f\\\", \\\"g\\\", and \\\"h\\\"\"                                                   #> [14] \"DEBUG [2025-07-25 12:36:14] Testing `logCatch()`\"                                                            #> [15] \"WARN [2025-07-25 12:36:15] Warning about \\\"x\\\" !\"                                                            #> [16] \"\\\"x\\\" is of class `character` and length 3\"                                                                  #> [17] \"The 3 values of \\\"x\\\" are: \\\"This is a string\\\", \\\"This is another string\\\", and \\\"This is a third string\\\"\" #> [18] \"SUCCESS [2025-07-25 12:36:15] Warning message was caught\""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/articles/logger.html","id":"masking-messages","dir":"Articles","previous_headings":"Catching messages","what":"Masking messages","title":"Logging utils","text":"can use masking utilities prevent display messages console. masking use grepl() check patterns display message match found. messages warnings, masking can set functions setInfoMasking() setWarningMasking(). example mask mask warning message includes following patterns: useful another package content caught logCatch() includes first warning debug message: errors, masking set function setErrorMasking(). masking affects error trace simplifying final output.","code":"setWarningMasking(\"(not useful)*(another package)\")  logCatch({   warning(\"This is a not useful message that is warned by another package\")   warning(\"This is a useful message that I want displayed\") }) #> ! Warning [25/07/2025 - 12:36:15]:  This is a useful message that I want displayed readLines(\"test-logs/log.txt\") #>  [1] \"DEBUG [2025-07-25 12:36:12] Message for debugging purposes\"                                                  #>  [2] \"INFO [2025-07-25 12:36:12] Message for general information\"                                                  #>  [3] \"WARN [2025-07-25 12:36:12] Warning message\"                                                                  #>  [4] \"ERROR [2025-07-25 12:36:12] Error message\"                                                                   #>  [5] \"DEBUG [2025-07-25 12:36:12] A logging example\"                                                               #>  [6] \"INFO [2025-07-25 12:36:12] Some useful information taking advantage of `logger`\"                             #>  [7] \"SUCCESS [2025-07-25 12:36:14] First logging example done [2.0 s]\"                                            #>  [8] \"WARN [2025-07-25 12:36:14] Warning example about \\\"x\\\" !\"                                                    #>  [9] \"\\\"x\\\" is of class `numeric` and length 1\"                                                                    #> [10] \"The 1 value of \\\"x\\\" is: 10\"                                                                                 #> [11] \"WARN [2025-07-25 12:36:14] Warning example about \\\"x\\\" !\"                                                    #> [12] \"\\\"x\\\" is of class `character` and length 4\"                                                                  #> [13] \"The 4 values of \\\"x\\\" are: \\\"e\\\", \\\"f\\\", \\\"g\\\", and \\\"h\\\"\"                                                   #> [14] \"DEBUG [2025-07-25 12:36:14] Testing `logCatch()`\"                                                            #> [15] \"WARN [2025-07-25 12:36:15] Warning about \\\"x\\\" !\"                                                            #> [16] \"\\\"x\\\" is of class `character` and length 3\"                                                                  #> [17] \"The 3 values of \\\"x\\\" are: \\\"This is a string\\\", \\\"This is another string\\\", and \\\"This is a third string\\\"\" #> [18] \"SUCCESS [2025-07-25 12:36:15] Warning message was caught\"                                                    #> [19] \"DEBUG [2025-07-25 12:36:15] This is a not useful message that is warned by another package\"                  #> [20] \"WARN [2025-07-25 12:36:15] This is a useful message that I want displayed\""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":". Copyright holder, funder. Michael Sevestre. Author, maintainer. Pavel Balazki. Author. Juri Solodenko. Author. Indrajeet Patil. Author.            @patilindrajeets","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Sevestre M, Balazki P, Solodenko J, Patil (2025). ospsuite.utils: Utility Functions Open Systems Pharmacology R Packages. R package version 1.8.0.9001, https://github.com/open-systems-pharmacology/OSPSuite.RUtils.","code":"@Manual{,   title = {ospsuite.utils: Utility Functions for Open Systems Pharmacology R Packages},   author = {Michael Sevestre and Pavel Balazki and Juri Solodenko and Indrajeet Patil},   year = {2025},   note = {R package version 1.8.0.9001},   url = {https://github.com/open-systems-pharmacology/OSPSuite.RUtils}, }"},{"path":[]},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Utility Functions for Open Systems Pharmacology R Packages","text":"can install latest version package GitHub: Alternatively, can download built binaries .","code":"# install.packages(\"remotes\") remotes::install_github(\"Open-Systems-Pharmacology/OSPSuite.RUtils\")"},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/index.html","id":"introduction","dir":"","previous_headings":"","what":"Introduction","title":"Utility Functions for Open Systems Pharmacology R Packages","text":"package contains utility functions R packages Open Systems Pharmacology ecosystem: {ospsuite} {tlf} {ospsuite.reportingengine}","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/index.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Utility Functions for Open Systems Pharmacology R Packages","text":"Please note ospsuite.utils project released Contributor Code Conduct. contributing project, agree abide terms.","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/Printable.html","id":null,"dir":"Reference","previous_headings":"","what":"Printable — Printable","title":"Printable — Printable","text":"Base class implements basic properties printing console.","code":""},{"path":[]},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/Printable.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Printable — Printable","text":"Printable$new() Printable$clone()","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/Printable.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Printable — Printable","text":"Create new Printable object.","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/Printable.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Printable — Printable","text":"","code":"Printable$new()"},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/Printable.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Printable — Printable","text":"objects class cloneable method.","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/Printable.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Printable — Printable","text":"","code":"Printable$clone(deep = FALSE)"},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/Printable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Printable — Printable","text":"deep Whether make deep clone.","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/Printable.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Printable — Printable","text":"","code":"myPrintable <- R6::R6Class(   \"myPrintable\",   inherit = Printable,   public = list(     x = NULL,     y = NULL,     print = function() {       private$printClass()       private$printLine(\"x\", self$x)       private$printLine(\"y\", self$y)       invisible(self)     }   ) )  x <- myPrintable$new() #> Warning: ospsuite.utils::Printable was deprecated in ospsuite.utils 1.6.2. #> ℹ Please use ospsuite.utils::ospPrint*() instead. #> ℹ The deprecated feature was likely used in the ospsuite.utils package. #>   Please report the issue at #>   <https://github.com/open-systems-pharmacology/OSPSuite.RUtils/issues>. x #> myPrintable:  #>    x: NULL  #>    y: NULL"},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/cliFormat.html","id":null,"dir":"Reference","previous_headings":"","what":"cliFormat — cliFormat","title":"cliFormat — cliFormat","text":"Format text cli inline format Allows evaluation expressions within text submitting logs","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/cliFormat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"cliFormat — cliFormat","text":"","code":"cliFormat(..., .envir = parent.frame())"},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/cliFormat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"cliFormat — cliFormat","text":"... Characters format .envir Environment evaluate expressions","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/cliFormat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"cliFormat — cliFormat","text":"formatted character string","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/cliFromLevel.html","id":null,"dir":"Reference","previous_headings":"","what":"cliFromLevel — cliFromLevel","title":"cliFromLevel — cliFromLevel","text":"Get appropriate cli function based log level","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/cliFromLevel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"cliFromLevel — cliFromLevel","text":"","code":"cliFromLevel(logLevel)"},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/cliFromLevel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"cliFromLevel — cliFromLevel","text":"logLevel Log level character string (DEBUG, INFO, SUCCESS, WARN, ERROR, FATAL)","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/cliFromLevel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"cliFromLevel — cliFromLevel","text":"function","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/consoleLayout.html","id":null,"dir":"Reference","previous_headings":"","what":"consoleLayout — consoleLayout","title":"consoleLayout — consoleLayout","text":"Function display pretty log messages console","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/consoleLayout.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"consoleLayout — consoleLayout","text":"","code":"consoleLayout(   level,   msg,   namespace = NA_character_,   .logcall = sys.call(),   .topcall = sys.call(-1),   .topenv = parent.frame() )"},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/consoleLayout.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"consoleLayout — consoleLayout","text":"level log level, see log_levels() details msg string message namespace string referring logger environment / config used override target message record used instead default namespace, defined R package name logger called, falls back common, global namespace. .logcall logging call evaluated (useful formatters layouts want access raw, unevaluated R expression) .topcall R expression logging function called (useful formatters layouts extract calling function's name arguments) .topenv original frame .topcall calling function formatter function evaluated used look namespace well via logger:::top_env_name","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/dot-formatValue.html","id":null,"dir":"Reference","previous_headings":"","what":"Format a value for display — .formatValue","title":"Format a value for display — .formatValue","text":"Converts value string representation properly shows type","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/dot-formatValue.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format a value for display — .formatValue","text":"","code":".formatValue(value)"},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/dot-formatValue.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format a value for display — .formatValue","text":"value value format","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/dot-formatValue.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format a value for display — .formatValue","text":"string representation value","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/dot-isEmpty.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper function to check if a value is considered ","title":"Helper function to check if a value is considered ","text":"Determines value empty (NULL, NA, empty string, empty vector, empty list)","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/dot-isEmpty.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper function to check if a value is considered ","text":"","code":".isEmpty(val)"},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/dot-isEmpty.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper function to check if a value is considered ","text":"val value check","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/dot-isEmpty.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper function to check if a value is considered ","text":"TRUE value considered empty, FALSE otherwise","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/enum.html","id":null,"dir":"Reference","previous_headings":"","what":"Define an enumerated list — enum","title":"Define an enumerated list — enum","text":"Create enumeration used instead arbitrary values code. languages (C, C++, Python, etc.), enum (enumeration) data type consists integer constants ideal contexts variable can take one limited set possible values (e.g. day week). Since R programming language natively support enumeration, current function provides way create using lists.","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/enum.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Define an enumerated list — enum","text":"","code":"enum(enumValues)"},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/enum.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Define an enumerated list — enum","text":"enumValues vector list comma-separated constants use creating enum. Optionally, can named constants.","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/enum.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Define an enumerated list — enum","text":"enumerated list.","code":""},{"path":[]},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/enum.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Define an enumerated list — enum","text":"","code":"# Without predefined values Color <- enum(c(\"Red\", \"Blue\", \"Green\")) Color #> $Red #> [1] \"Red\" #>  #> $Blue #> [1] \"Blue\" #>  #> $Green #> [1] \"Green\" #>  myColor <- Color$Red myColor #> [1] \"Red\"  # With predefined values Symbol <- enum(c(Diamond = 1, Triangle = 2, Circle = 2)) Symbol #> $Diamond #> [1] 1 #>  #> $Triangle #> [1] 2 #>  #> $Circle #> [1] 2 #>   mySymbol <- Symbol$Diamond mySymbol #> [1] 1"},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/enumGetKey.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the key mapped to the given value in an enum — enumGetKey","title":"Get the key mapped to the given value in an enum — enumGetKey","text":"Get key mapped given value enum","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/enumGetKey.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the key mapped to the given value in an enum — enumGetKey","text":"","code":"enumGetKey(enum, value)  getEnumKey(enum, value)"},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/enumGetKey.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the key mapped to the given value in an enum — enumGetKey","text":"enum enum key-value pair stored value value mapped key","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/enumGetKey.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the key mapped to the given value in an enum — enumGetKey","text":"Key value stored. value enum, NULL returned.","code":""},{"path":[]},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/enumGetKey.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the key mapped to the given value in an enum — enumGetKey","text":"","code":"Symbol <- enum(c(Diamond = 1, Triangle = 2, Circle = 2)) enumGetKey(Symbol, 1) #> [1] \"Diamond\""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/enumGetValue.html","id":null,"dir":"Reference","previous_headings":"","what":"Get enum values — enumGetValue","title":"Get enum values — enumGetValue","text":"Return value stored given key. key present, error thrown.","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/enumGetValue.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get enum values — enumGetValue","text":"","code":"enumGetValue(enum, key)"},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/enumGetValue.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get enum values — enumGetValue","text":"enum enum contains key-value pair. key key value stored.","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/enumGetValue.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get enum values — enumGetValue","text":"Value assigned key.","code":""},{"path":[]},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/enumGetValue.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get enum values — enumGetValue","text":"","code":"Symbol <- enum(c(Diamond = 1, Triangle = 2, Circle = 2)) enumGetValue(Symbol, \"Diamond\") #> [1] 1"},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/enumHasKey.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if an enum has a certain key. — enumHasKey","title":"Check if an enum has a certain key. — enumHasKey","text":"Check enum certain key.","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/enumHasKey.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if an enum has a certain key. — enumHasKey","text":"","code":"enumHasKey(key, enum)"},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/enumHasKey.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if an enum has a certain key. — enumHasKey","text":"key Key check . enum Enum look key.","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/enumHasKey.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if an enum has a certain key. — enumHasKey","text":"TRUE key-value pair key exists, FALSE otherwise.","code":""},{"path":[]},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/enumHasKey.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if an enum has a certain key. — enumHasKey","text":"","code":"Symbol <- enum(c(Diamond = 1, Triangle = 2, Circle = 2)) enumHasKey(\"Diamond\", Symbol) #> [1] TRUE enumHasKey(\"Square\", Symbol) #> [1] FALSE"},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/enumKeys.html","id":null,"dir":"Reference","previous_headings":"","what":"Get all keys of an enum — enumKeys","title":"Get all keys of an enum — enumKeys","text":"Get keys enum","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/enumKeys.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get all keys of an enum — enumKeys","text":"","code":"enumKeys(enum)"},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/enumKeys.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get all keys of an enum — enumKeys","text":"enum enum containing keys.","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/enumKeys.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get all keys of an enum — enumKeys","text":"List key names.","code":""},{"path":[]},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/enumKeys.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get all keys of an enum — enumKeys","text":"","code":"Symbol <- enum(c(Diamond = 1, Triangle = 2, Circle = 2)) enumKeys(Symbol) #> [1] \"Diamond\"  \"Triangle\" \"Circle\""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/enumPut.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a new key-value pairs to an enum — enumPut","title":"Add a new key-value pairs to an enum — enumPut","text":"Add new key-value pairs enum","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/enumPut.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a new key-value pairs to an enum — enumPut","text":"","code":"enumPut(keys, values, enum, overwrite = FALSE)"},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/enumPut.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a new key-value pairs to an enum — enumPut","text":"keys Keys values added values Values added enum enum specified key-value pairs added. WARNING: original object modified! overwrite TRUE value given keys exists, overwritten new value. Otherwise, error thrown. Default FALSE.","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/enumPut.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add a new key-value pairs to an enum — enumPut","text":"Enum added key-value pair.","code":""},{"path":[]},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/enumPut.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add a new key-value pairs to an enum — enumPut","text":"","code":"myEnum <- enum(c(a = \"b\")) myEnum <- enumPut(\"c\", \"d\", myEnum) myEnum <- enumPut(c(\"c\", \"d\", \"g\"), c(12, 2, \"a\"), myEnum, overwrite = TRUE)"},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/enumRemove.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove an entry from the enum. — enumRemove","title":"Remove an entry from the enum. — enumRemove","text":"Remove entry enum.","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/enumRemove.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove an entry from the enum. — enumRemove","text":"","code":"enumRemove(keys, enum)"},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/enumRemove.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove an entry from the enum. — enumRemove","text":"keys Key(s) entries removed enum enum Enum entries removed WARNING: original object modified!","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/enumRemove.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove an entry from the enum. — enumRemove","text":"Enum without removed entries.","code":""},{"path":[]},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/enumRemove.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove an entry from the enum. — enumRemove","text":"","code":"Symbol <- enum(c(Diamond = 1, Triangle = 2, Circle = 2))  # either by key enumRemove(\"Diamond\", Symbol) #> $Triangle #> [1] 2 #>  #> $Circle #> [1] 2 #>   # or by position enumRemove(2L, Symbol) #> $Diamond #> [1] 1 #>  #> $Circle #> [1] 2 #>"},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/enumValues.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the values stored in an enum — enumValues","title":"Get the values stored in an enum — enumValues","text":"Get values stored enum","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/enumValues.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the values stored in an enum — enumValues","text":"","code":"enumValues(enum)"},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/enumValues.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the values stored in an enum — enumValues","text":"enum enum containing values","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/enumValues.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the values stored in an enum — enumValues","text":"List values stored enum.","code":""},{"path":[]},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/enumValues.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the values stored in an enum — enumValues","text":"","code":"Symbol <- enum(c(Diamond = 1, Triangle = 2, Circle = 2)) enumValues(Symbol) #> [1] 1 2 2"},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/fileLayout.html","id":null,"dir":"Reference","previous_headings":"","what":"fileLayout — fileLayout","title":"fileLayout — fileLayout","text":"Function display pretty log messages console","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/fileLayout.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"fileLayout — fileLayout","text":"","code":"fileLayout(   level,   msg,   namespace = NA_character_,   .logcall = sys.call(),   .topcall = sys.call(-1),   .topenv = parent.frame() )"},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/fileLayout.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"fileLayout — fileLayout","text":"level log level, see log_levels() details msg string message namespace string referring logger environment / config used override target message record used instead default namespace, defined R package name logger called, falls back common, global namespace. .logcall logging call evaluated (useful formatters layouts want access raw, unevaluated R expression) .topcall R expression logging function called (useful formatters layouts extract calling function's name arguments) .topenv original frame .topcall calling function formatter function evaluated used look namespace well via logger:::top_env_name","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/flattenList.html","id":null,"dir":"Reference","previous_headings":"","what":"Flatten a list to an atomic vector of desired type — flattenList","title":"Flatten a list to an atomic vector of desired type — flattenList","text":"Flatten list atomic vector desired type","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/flattenList.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Flatten a list to an atomic vector of desired type — flattenList","text":"","code":"flattenList(x, type)"},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/flattenList.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Flatten a list to an atomic vector of desired type — flattenList","text":"x list atomic vector. latter, change made. type Type atomic vector returned.","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/flattenList.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Flatten a list to an atomic vector of desired type — flattenList","text":"atomic vector desired type.","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/flattenList.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Flatten a list to an atomic vector of desired type — flattenList","text":"type argument decide variant purrr::flatten() family used flatten list.","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/flattenList.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Flatten a list to an atomic vector of desired type — flattenList","text":"","code":"flattenList(list(1, 2, 3, NA), type = \"numeric\") #> [1]  1  2  3 NA flattenList(list(TRUE, FALSE, NA), type = \"integer\") #> [1]  1  0 NA"},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/foldSafe.html","id":null,"dir":"Reference","previous_headings":"","what":"Safe fold calculation — foldSafe","title":"Safe fold calculation — foldSafe","text":"Calculates x / y substituting values epsilon (x y) epsilon. x y must length","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/foldSafe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Safe fold calculation — foldSafe","text":"","code":"foldSafe(x, y, epsilon = ospsuiteUtilsEnv$LOG_SAFE_EPSILON)"},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/foldSafe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Safe fold calculation — foldSafe","text":"x numeric vector numerics. y numeric vector numerics. epsilon small number considered threshold values treated epsilon. Allows computation fold changes values close 0. Default value getOSPSuiteUtilsSetting(\"LOG_SAFE_EPSILON\").","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/foldSafe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Safe fold calculation — foldSafe","text":"vector x / y.","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/foldSafe.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Safe fold calculation — foldSafe","text":"","code":"inputX <- c(NA, 1, 5, 0, -1) inputY <- c(1, -1, NA, 0, -1) folds <- foldSafe(inputX, inputY)"},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/formatNumerics.html","id":null,"dir":"Reference","previous_headings":"","what":"formatNumerics — formatNumerics","title":"formatNumerics — formatNumerics","text":"Render numeric values object character using specified format: object data.frame list, formatNumerics applies fields object type character integer, formatNumerics renders values object type numeric, formatNumerics applies defined format","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/formatNumerics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"formatNumerics — formatNumerics","text":"","code":"formatNumerics(   object,   digits = ospsuiteUtilsEnv$formatNumericsDigits,   scientific = FALSE )"},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/formatNumerics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"formatNumerics — formatNumerics","text":"object R object list, data.frame, character numeric values. digits Number decimal digits render scientific Logical value defining scientific writing rendered","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/formatNumerics.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"formatNumerics — formatNumerics","text":"Numeric values rendered character values. object data.frame list, data.frame list returned numeric values rendered character values.","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/formatNumerics.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"formatNumerics — formatNumerics","text":"","code":"# Format array of numeric values formatNumerics(log(c(12, 15, 0.3)), digits = 1, scientific = TRUE) #> [1] \"2.5e+00\"  \"2.7e+00\"  \"-1.2e+00\"  # Format a data.frame x <- data.frame(parameter = c(\"a\", \"b\", \"c\"), value = c(1, 110.4, 6.666)) formatNumerics(x, digits = 2, scientific = FALSE) #>   parameter  value #> 1         a   1.00 #> 2         b 110.40 #> 3         c   6.67"},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/getLogFolder.html","id":null,"dir":"Reference","previous_headings":"","what":"getLogFolder — getLogFolder","title":"getLogFolder — getLogFolder","text":"Get current log folder logs saved","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/getLogFolder.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"getLogFolder — getLogFolder","text":"","code":"getLogFolder()"},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/getLogFolder.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"getLogFolder — getLogFolder","text":"","code":"if (FALSE) { # \\dontrun{ # Set/get log folder to a temporary directory setLogFolder(tempdir()) getLogFolder()  # Set/get logFolder to `NULL`, cancel saving of logs setLogFolder() getLogFolder() } # }"},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/getOSPSuiteUtilsSetting.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the value of a global {ospsuite.utils} package setting. — getOSPSuiteUtilsSetting","title":"Get the value of a global {ospsuite.utils} package setting. — getOSPSuiteUtilsSetting","text":"Get value global {ospsuite.utils} package setting.","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/getOSPSuiteUtilsSetting.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the value of a global {ospsuite.utils} package setting. — getOSPSuiteUtilsSetting","text":"","code":"getOSPSuiteUtilsSetting(settingName)"},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/getOSPSuiteUtilsSetting.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the value of a global {ospsuite.utils} package setting. — getOSPSuiteUtilsSetting","text":"settingName String name setting","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/getOSPSuiteUtilsSetting.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the value of a global {ospsuite.utils} package setting. — getOSPSuiteUtilsSetting","text":"Value setting stored ospsuiteEnv. setting exist, error thrown.","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/getOSPSuiteUtilsSetting.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the value of a global {ospsuite.utils} package setting. — getOSPSuiteUtilsSetting","text":"","code":"getOSPSuiteUtilsSetting(\"packageName\") #> [1] \"ospsuite.utils\" getOSPSuiteUtilsSetting(\"suiteName\") #> [1] \"Open Systems Pharmacology\" getOSPSuiteUtilsSetting(\"formatNumericsDigits\") #> [1] 2"},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/hasEmptyStrings.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate that no empty string is present — hasEmptyStrings","title":"Validate that no empty string is present — hasEmptyStrings","text":"Validate empty string present","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/hasEmptyStrings.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate that no empty string is present — hasEmptyStrings","text":"","code":"hasEmptyStrings(x)  validateHasOnlyNonEmptyStrings(x)"},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/hasEmptyStrings.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate that no empty string is present — hasEmptyStrings","text":"x character string vector character strings.","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/hasEmptyStrings.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate that no empty string is present — hasEmptyStrings","text":"hasEmptyStrings() returns TRUE strings empty; FALSE otherwise. validateHasOnlyNonEmptyStrings() produces error empty string present. returns NULL otherwise.","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/hasEmptyStrings.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Validate that no empty string is present — hasEmptyStrings","text":"following conditions met, input string considered empty: NAs present (e.g. x = c(\"\", \"abc\", NA)) string empty (e.g. x = list(\"\", \"abc\", \"\")) length 0 (e.g. x = character())","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/hasEmptyStrings.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Validate that no empty string is present — hasEmptyStrings","text":"","code":"hasEmptyStrings(c(\"x\", \"y\")) # FALSE #> [1] FALSE hasEmptyStrings(list(\"x\", \"y\")) # FALSE #> [1] FALSE hasEmptyStrings(\"   abc   \") # FALSE #> [1] FALSE hasEmptyStrings(c(\"\", \"y\")) # TRUE #> [1] TRUE hasEmptyStrings(list(\"\", \"y\")) # TRUE #> [1] TRUE hasEmptyStrings(NA) # TRUE #> [1] TRUE hasEmptyStrings(character(0)) # TRUE #> [1] TRUE hasEmptyStrings(c(NA, \"x\", \"y\")) # TRUE #> [1] TRUE  validateHasOnlyNonEmptyStrings(c(\"x\", \"y\")) # NULL validateHasOnlyNonEmptyStrings(list(\"x\", \"y\")) # NULL validateHasOnlyNonEmptyStrings(\"   abc   \") # NULL # validateHasOnlyNonEmptyStrings(c(\"\", \"y\")) # error # validateHasOnlyNonEmptyStrings(list(\"\", \"y\")) # error # validateHasOnlyNonEmptyStrings(NA) # error # validateHasOnlyNonEmptyStrings(character(0)) # error # validateHasOnlyNonEmptyStrings(c(NA, \"x\", \"y\")) # error"},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/hasOnlyDistinctValues.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate that a vector has only unique values — hasOnlyDistinctValues","title":"Validate that a vector has only unique values — hasOnlyDistinctValues","text":"Validate vector unique values","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/hasOnlyDistinctValues.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate that a vector has only unique values — hasOnlyDistinctValues","text":"","code":"hasOnlyDistinctValues(values, na.rm = TRUE)  validateHasOnlyDistinctValues(values, na.rm = TRUE)"},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/hasOnlyDistinctValues.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate that a vector has only unique values — hasOnlyDistinctValues","text":"values array values na.rm Logical decide missing values removed duplicate checking. Note duplicate NA values flagged na.rm=FALSE.","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/hasOnlyDistinctValues.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate that a vector has only unique values — hasOnlyDistinctValues","text":"hasOnlyDistinctValues returns TRUE values unique. validateHasOnlyDistinctValues() returns NULL unique values present, otherwise produces error.","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/hasOnlyDistinctValues.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Validate that a vector has only unique values — hasOnlyDistinctValues","text":"","code":"hasOnlyDistinctValues(c(\"x\", \"y\")) #> [1] TRUE hasOnlyDistinctValues(c(\"x\", \"y\", \"x\")) #> [1] FALSE hasOnlyDistinctValues(c(\"x\", NA, \"y\", NA), na.rm = FALSE) #> [1] FALSE hasOnlyDistinctValues(c(\"x\", NA, \"y\", NA), na.rm = TRUE) #> [1] TRUE  validateHasOnlyDistinctValues(c(\"x\", \"y\")) # NULL #> NULL # validateHasOnlyDistinctValues(c(\"x\", \"y\", \"x\")) # error"},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/ifEqual.html","id":null,"dir":"Reference","previous_headings":"","what":"Value conditional on equality — ifEqual","title":"Value conditional on equality — ifEqual","text":"Short-key checking arguments 1 2 equal, output argument 3 equal, output argument 4 otherwise.","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/ifEqual.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Value conditional on equality — ifEqual","text":"","code":"ifEqual(x, y, outputIfEqual, outputIfNotEqual = NULL)"},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/ifEqual.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Value conditional on equality — ifEqual","text":"x argument 1 y argument 2 outputIfEqual argument 3 outputIfNotEqual argument 4","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/ifEqual.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Value conditional on equality — ifEqual","text":"","code":"ifEqual(1, 1, \"x\", \"y\") # \"x\" #> [1] \"x\" ifEqual(1, 2, \"x\", \"y\") # \"y\" #> [1] \"y\""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/ifIncluded.html","id":null,"dir":"Reference","previous_headings":"","what":"Value conditional on inclusion — ifIncluded","title":"Value conditional on inclusion — ifIncluded","text":"Shortkey checking arguments 1 included 2, output argument 3 included, output argument 4 otherwise.","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/ifIncluded.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Value conditional on inclusion — ifIncluded","text":"","code":"ifIncluded(x, y, outputIfIncluded, outputIfNotIncluded = NULL)"},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/ifIncluded.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Value conditional on inclusion — ifIncluded","text":"x argument 1 y argument 2 outputIfIncluded argument 3 outputIfNotIncluded argument 4","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/ifIncluded.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Value conditional on inclusion — ifIncluded","text":"","code":"ifIncluded(\"a\", c(\"a\", \"b\"), 1, 2) # 1 #> [1] 1 ifIncluded(\"x\", c(\"a\", \"b\"), 1, 2) # 2 #> [1] 2"},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/ifNotNull.html","id":null,"dir":"Reference","previous_headings":"","what":"Value conditional on NULL — ifNotNull","title":"Value conditional on NULL — ifNotNull","text":"Short-key checking argument 1 NULL, output argument 2 null, output argument 3 otherwise. Check condition NULL, output outputIfNotNull, otherwise, output outputIfNull.","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/ifNotNull.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Value conditional on NULL — ifNotNull","text":"","code":"ifNotNull(condition, outputIfNotNull, outputIfNull = NULL)"},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/ifNotNull.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Value conditional on NULL — ifNotNull","text":"condition argument 1 outputIfNotNull argument 2 outputIfNull argument 3","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/ifNotNull.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Value conditional on NULL — ifNotNull","text":"outputIfNotNull condition NULL, outputIfNull otherwise.","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/ifNotNull.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Value conditional on NULL — ifNotNull","text":"","code":"ifNotNull(NULL, \"x\") #> NULL ifNotNull(NULL, \"x\", \"y\") #> [1] \"y\" ifNotNull(1 < 2, \"x\", \"y\") #> [1] \"x\""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/isEmpty.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate if the provided object is empty — isEmpty","title":"Validate if the provided object is empty — isEmpty","text":"Validate provided object empty","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/isEmpty.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate if the provided object is empty — isEmpty","text":"","code":"isEmpty(object)  validateIsNotEmpty(object)"},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/isEmpty.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate if the provided object is empty — isEmpty","text":"object object atomic vector list objects.","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/isEmpty.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate if the provided object is empty — isEmpty","text":"isEmpty() returns TRUE object empty; FALSE otherwise. validateIsNotEmpty() returns NULL validation successful. Otherwise, error signaled.","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/isEmpty.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Validate if the provided object is empty — isEmpty","text":"","code":"# empty list or data.frame isEmpty(NULL) #> [1] TRUE isEmpty(numeric()) #> [1] TRUE isEmpty(list()) #> [1] TRUE isEmpty(data.frame()) #> [1] TRUE  # accounts for filtering of arrays and data.frame df <- data.frame(x = c(1, 2, 3), y = c(4, 5, 6)) isEmpty(df) #> [1] FALSE isEmpty(df$x[FALSE]) #> [1] TRUE isEmpty(df[FALSE, ]) #> [1] TRUE  # validation helper validateIsNotEmpty(list(1, 2)) # NULL #> NULL # validateIsNotEmpty(NULL) # error"},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/isFileExtension.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate if the provided path has required extension — isFileExtension","title":"Validate if the provided path has required extension — isFileExtension","text":"Validate provided path required extension","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/isFileExtension.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate if the provided path has required extension — isFileExtension","text":"","code":"isFileExtension(file, extension)  validateIsFileExtension(file, extension)"},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/isFileExtension.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate if the provided path has required extension — isFileExtension","text":"file name file full path. extension required extension file.","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/isFileExtension.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate if the provided path has required extension — isFileExtension","text":"isFileExtension() returns TRUE file name (full path) includes extension. validations successful, validateIsFileExtension() returns NULL. Otherwise, error signaled.","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/isFileExtension.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Validate if the provided path has required extension — isFileExtension","text":"","code":"isFileExtension(\"enum.R\", \"R\") # TRUE #> [1] TRUE isFileExtension(\"enum.R\", \"pkml\") # FALSE #> [1] FALSE  validateIsFileExtension(\"enum.R\", \"R\") # NULL #> NULL # validateIsFileExtension(\"enum.R\", \"pkml\") # error"},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/isFileUTF8.html","id":null,"dir":"Reference","previous_headings":"","what":"Assess if a file is UTF-8 encoded. — isFileUTF8","title":"Assess if a file is UTF-8 encoded. — isFileUTF8","text":"Assess file UTF-8 encoded.","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/isFileUTF8.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assess if a file is UTF-8 encoded. — isFileUTF8","text":"","code":"isFileUTF8(file)"},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/isFileUTF8.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assess if a file is UTF-8 encoded. — isFileUTF8","text":"file name file full path.","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/isFileUTF8.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assess if a file is UTF-8 encoded. — isFileUTF8","text":"logical assessing whether non UTF-8 encoded characters file","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/isFileUTF8.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Assess if a file is UTF-8 encoded. — isFileUTF8","text":"","code":"writeLines(c(\"Hello, world!\"), \"utf.txt\") writeLines(c(\"Hello, world!\", \"\\xb5g/L\"), \"non-utf.txt\")  isFileUTF8(\"utf.txt\") # TRUE #> [1] TRUE isFileUTF8(\"non-utf.txt\") # FALSE #> [1] FALSE"},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/isIncluded.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if a vector of values is included in another vector of values — isIncluded","title":"Check if a vector of values is included in another vector of values — isIncluded","text":"Check vector values included another vector values","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/isIncluded.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if a vector of values is included in another vector of values — isIncluded","text":"","code":"isIncluded(values, parentValues)  validateIsIncluded(values, parentValues, nullAllowed = FALSE)"},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/isIncluded.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if a vector of values is included in another vector of values — isIncluded","text":"values vector values. parentValues vector values values checked inclusion. nullAllowed Boolean flag NULL accepted object. TRUE, NULL always returns TRUE, otherwise NULL returns FALSE. Default FALSE.","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/isIncluded.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if a vector of values is included in another vector of values — isIncluded","text":"isIncluded() returns TRUE value values (vector) present parentValues; FALSE otherwise. validateIsIncluded() returns NULL child value included parent value set, otherwise error signaled.","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/isIncluded.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if a vector of values is included in another vector of values — isIncluded","text":"","code":"# check if a column is present in dataframe A <- data.frame(   col1 = c(1, 2, 3),   col2 = c(4, 5, 6),   col3 = c(7, 8, 9) ) isIncluded(\"col3\", names(A)) # TRUE #> [1] TRUE  # check if single element is present in a vector (atomic or non-atomic) isIncluded(\"x\", list(\"w\", \"x\", 1, 2)) # TRUE #> [1] TRUE isIncluded(\"x\", c(\"w\", \"a\", \"y\")) # FALSE #> [1] FALSE  # check if **all** values (if it's a vector) are contained in parent values isIncluded(c(\"x\", \"y\"), c(\"a\", \"y\", \"b\", \"x\")) # TRUE #> [1] TRUE isIncluded(list(\"x\", 1), list(\"a\", \"b\", \"x\", 1)) # TRUE #> [1] TRUE isIncluded(c(\"x\", \"y\"), c(\"a\", \"b\", \"x\")) # FALSE #> [1] FALSE isIncluded(list(\"x\", 1), list(\"a\", \"b\", \"x\")) # FALSE #> [1] FALSE  # corresponding validation validateIsIncluded(\"col3\", names(A)) # NULL #> NULL # validateIsIncluded(\"col6\", names(A)) # error"},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/isOfLength.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if the provided object has expected length — isOfLength","title":"Check if the provided object has expected length — isOfLength","text":"Check provided object expected length","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/isOfLength.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if the provided object has expected length — isOfLength","text":"","code":"isOfLength(object, nbElements)  validateIsOfLength(object, nbElements)"},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/isOfLength.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if the provided object has expected length — isOfLength","text":"object object list objects nbElements number elements supposed object","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/isOfLength.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if the provided object has expected length — isOfLength","text":"isOfLength() returns TRUE object objects inside list nbElements. validateIsOfLength(), validations successful, NULL returned. Otherwise, error signaled.","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/isOfLength.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Check if the provided object has expected length — isOfLength","text":"first level given list considered.","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/isOfLength.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if the provided object has expected length — isOfLength","text":"","code":"df <- data.frame(x = c(1, 2, 3))  isOfLength(df, 1) # TRUE #> [1] TRUE isOfLength(df, 3) # FALSE #> [1] FALSE  validateIsOfLength(list(1, 2), 2L) # NULL #> NULL # validateIsOfLength(c(\"3\", \"4\"), 3L) # error"},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/isOfType.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if the provided object is of certain type — isOfType","title":"Check if the provided object is of certain type — isOfType","text":"Check provided object certain type","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/isOfType.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if the provided object is of certain type — isOfType","text":"","code":"isOfType(object, type, nullAllowed = FALSE)"},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/isOfType.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if the provided object is of certain type — isOfType","text":"object object atomic vector list objects. type single string vector string representation class type checked . nullAllowed Boolean flag NULL accepted object. TRUE, NULL always returns TRUE, otherwise NULL returns FALSE. Default FALSE.","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/isOfType.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if the provided object is of certain type — isOfType","text":"TRUE object objects inside list given type.","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/isOfType.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Check if the provided object is of certain type — isOfType","text":"first level given list considered.","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/isOfType.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if the provided object is of certain type — isOfType","text":"","code":"# checking type of a single object df <- data.frame(x = c(1, 2, 3)) isOfType(df, \"data.frame\") #> [1] TRUE"},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/isSameLength.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate if objects are of same length — isSameLength","title":"Validate if objects are of same length — isSameLength","text":"Validate objects length","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/isSameLength.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate if objects are of same length — isSameLength","text":"","code":"isSameLength(...)  validateIsSameLength(...)"},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/isSameLength.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate if objects are of same length — isSameLength","text":"... Objects compare.","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/isSameLength.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate if objects are of same length — isSameLength","text":"isSameLength() returns TRUE objects lengths. validateIsSameLength(), validations successful, NULL returned. Otherwise, error signaled.","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/isSameLength.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Validate if objects are of same length — isSameLength","text":"","code":"# compare length of only 2 objects isSameLength(mtcars, ToothGrowth) # FALSE #> [1] FALSE isSameLength(cars, BOD) # TRUE #> [1] TRUE  # or more number of objects isSameLength(c(1, 2), c(TRUE, FALSE), c(\"x\", \"y\")) # TRUE #> [1] TRUE isSameLength(list(1, 2), list(TRUE, FALSE), list(\"x\")) # FALSE #> [1] FALSE  # validation validateIsSameLength(list(1, 2), c(\"3\", \"4\")) # NULL #> NULL # validateIsSameLength(list(1, 2), c(\"3\", \"4\"), c(FALSE)) # error"},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/isUTF8.html","id":null,"dir":"Reference","previous_headings":"","what":"Assess if a character vector is UTF-8 encoded. — isUTF8","title":"Assess if a character vector is UTF-8 encoded. — isUTF8","text":"Assess character vector UTF-8 encoded.","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/isUTF8.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assess if a character vector is UTF-8 encoded. — isUTF8","text":"","code":"isUTF8(text)"},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/isUTF8.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assess if a character vector is UTF-8 encoded. — isUTF8","text":"text character vector","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/isUTF8.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assess if a character vector is UTF-8 encoded. — isUTF8","text":"logical assessing whether non UTF-8 encoded characters text","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/isUTF8.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Assess if a character vector is UTF-8 encoded. — isUTF8","text":"","code":"isUTF8(\"Hello, world!\") # TRUE #> [1] TRUE isUTF8(\"\\xb5g/L\") # FALSE #> [1] FALSE"},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/logCatch.html","id":null,"dir":"Reference","previous_headings":"","what":"logCatch — logCatch","title":"logCatch — logCatch","text":"Catch errors, log display meaningful information","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/logCatch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"logCatch — logCatch","text":"","code":"logCatch(expr)"},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/logCatch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"logCatch — logCatch","text":"expr Evaluated code chunks","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/logCatch.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"logCatch — logCatch","text":"","code":"# Catch and display warning message logCatch({   warning(\"This is a warning message\") }) #> WARN [2025-07-25 12:36:00] This is a warning message"},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/logDebug.html","id":null,"dir":"Reference","previous_headings":"","what":"logDebug — logDebug","title":"logDebug — logDebug","text":"Log debug time stamp","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/logDebug.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"logDebug — logDebug","text":"","code":"logDebug(msg)"},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/logDebug.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"logDebug — logDebug","text":"msg Character values message log leverages cli formatting.","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/logDebug.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"logDebug — logDebug","text":"","code":"# Log debug logDebug(\"This is a debugging message\")"},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/logError.html","id":null,"dir":"Reference","previous_headings":"","what":"logError — logError","title":"logError — logError","text":"Log error time stamp","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/logError.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"logError — logError","text":"","code":"logError(msg)"},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/logError.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"logError — logError","text":"msg Character values message log leverages cli formatting.","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/logError.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"logError — logError","text":"","code":"# Log error logError(cliFormat(\"This is an {.strong error} message\")) #> ✖ Error [25/07/2025 - 12:36:00]:  This is an error message #>   # Log error with indications logError(cliFormat(   \"This is an {.strong error} message\",   \"Check these {.val values} or this {.fn function}\" )) #> ✖ Error [25/07/2025 - 12:36:00]:  This is an error message #> → Check these \"values\" or this `function()` #>"},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/logInfo.html","id":null,"dir":"Reference","previous_headings":"","what":"logInfo — logInfo","title":"logInfo — logInfo","text":"Log information time stamp accounting message type. Message type point toward appropriate cli function display.","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/logInfo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"logInfo — logInfo","text":"","code":"logInfo(msg, type = \"info\")"},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/logInfo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"logInfo — logInfo","text":"msg Character values message log leverages cli formatting. type Name message type toward best cli display: \"info\": uses cli::cli_alert_info() \"success\": uses cli::cli_alert_success() \"h1\": uses cli::cli_h1() \"h2\": uses cli::cli_h2() \"h3\": uses cli::cli_h3() \"text\": uses cli::cli_text() \"alert\": uses cli::cli_alert() \"li\": uses cli::cli_li() \"ol\": uses cli::cli_ol() \"progress_step\": uses cli::cli_progress_step()","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/logInfo.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"logInfo — logInfo","text":"","code":"# Log information logInfo(cliFormat(\"This is an {.strong info} message\")) #> ℹ Info [25/07/2025 - 12:36:01]:  This is an info message #>   # Log a title logInfo(cliFormat(\"Task: {.strong tic toc test}\"), type = \"h1\") #>  #> ── Task: tic toc test ──────────────────────────────────────────────────────────  # Log success t0 <- tic() Sys.sleep(3) logInfo(cliFormat(\"Task: {.strong tic toc test} completed [{toc(t0, \\\"s\\\")}]\"), type = \"success\") #> ✔ Info [25/07/2025 - 12:36:04]:  Task: tic toc test completed [3.0 s] #>"},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/logSafe.html","id":null,"dir":"Reference","previous_headings":"","what":"Computes logarithm of a number or of a vector of numbers and handles zeros while substituting all values below epsilon by epsilon. — logSafe","title":"Computes logarithm of a number or of a vector of numbers and handles zeros while substituting all values below epsilon by epsilon. — logSafe","text":"Computes logarithm number vector numbers handles zeros substituting values epsilon epsilon.","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/logSafe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Computes logarithm of a number or of a vector of numbers and handles zeros while substituting all values below epsilon by epsilon. — logSafe","text":"","code":"logSafe(x, base = exp(1), epsilon = ospsuiteUtilsEnv$LOG_SAFE_EPSILON)"},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/logSafe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Computes logarithm of a number or of a vector of numbers and handles zeros while substituting all values below epsilon by epsilon. — logSafe","text":"x numeric vector numerics. base positive complex number: base respect logarithms computed. Defaults e = exp(1). epsilon small number considered threshold values treated epsilon. Allows computation log close 0. Default value getOSPSuiteUtilsSetting(\"LOG_SAFE_EPSILON\").","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/logSafe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Computes logarithm of a number or of a vector of numbers and handles zeros while substituting all values below epsilon by epsilon. — logSafe","text":"log(x, base = base) x > epsilon, log(epsilon, base = base), NA_real_ NA elements.","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/logSafe.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Computes logarithm of a number or of a vector of numbers and handles zeros while substituting all values below epsilon by epsilon. — logSafe","text":"","code":"inputVector <- c(NA, 1, 5, 0, -1) logSafe(inputVector) #> [1]         NA   0.000000   1.609438 -46.051702 -46.051702"},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/logWarning.html","id":null,"dir":"Reference","previous_headings":"","what":"logWarning — logWarning","title":"logWarning — logWarning","text":"Log warning time stamp","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/logWarning.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"logWarning — logWarning","text":"","code":"logWarning(msg)"},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/logWarning.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"logWarning — logWarning","text":"msg Character values message log leverages cli formatting.","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/logWarning.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"logWarning — logWarning","text":"","code":"# Log warning logWarning(cliFormat(\"This is a {.strong warning} message\")) #> ! Warning [25/07/2025 - 12:36:04]:  This is a warning message #>"},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/messages.html","id":null,"dir":"Reference","previous_headings":"","what":"List of functions and strings used to signal error messages — messages","title":"List of functions and strings used to signal error messages — messages","text":"messages relevant context OSP R package ecosystem.","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/messages.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List of functions and strings used to signal error messages — messages","text":"","code":"messages"},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/messages.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"List of functions and strings used to signal error messages — messages","text":"object class list length 40.","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/messages.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List of functions and strings used to signal error messages — messages","text":"string error message.","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/messages.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List of functions and strings used to signal error messages — messages","text":"","code":"# example with string messages$errorEnumNotAllNames #> [1] \"The enumValues has some but not all names assigned.\\nThey must be all assigned or none assigned\"  # example with function messages$errorPropertyReadOnly(\"age\") #> [1] \"Property \\033[32m$age\\033[39m is readonly\"  # example display with warning warning(messages$errorPropertyReadOnly(\"age\")) #> Warning: Property $age is readonly  # example display using logs logInfo(messages$errorPropertyReadOnly(\"age\")) #> ℹ Info [25/07/2025 - 12:36:04]:  Property $age is readonly #>"},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/msgHeader.html","id":null,"dir":"Reference","previous_headings":"","what":"msgHeader — msgHeader","title":"msgHeader — msgHeader","text":"Message header displaying log level time stamp","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/msgHeader.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"msgHeader — msgHeader","text":"","code":"msgHeader(logLevel)"},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/msgHeader.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"msgHeader — msgHeader","text":"logLevel Log level character string (DEBUG, INFO, SUCCESS, WARN, ERROR, FATAL)","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/msgHeader.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"msgHeader — msgHeader","text":"formatted string log level timestamp","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/objectCount.html","id":null,"dir":"Reference","previous_headings":"","what":"Count number of objects — objectCount","title":"Count number of objects — objectCount","text":"Count number objects","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/objectCount.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Count number of objects — objectCount","text":"","code":"objectCount(x)"},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/objectCount.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Count number of objects — objectCount","text":"x object (atomic vector, list, instance(s) class).","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/objectCount.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Count number of objects — objectCount","text":"Integer representing count objects.","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/objectCount.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Count number of objects — objectCount","text":"Classes R can roughly distinguished following: Vector-style classes property length() represents number elements (e.g., factor, list, etc.). Record-style (dataframe scalar) classes, hand, complex structures represent single thing (e.g., data.frame, R6, lm, etc.). function counts objects differently depending entered class: argument vector vector-style class, return output length() function. Otherwise, returns 1. example, length(mtcars) returns 11, objectCount(mtcars) return 1, length(list(1, 2)) returns 2, objectCount(list(1, 2)) return 2 well.","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/objectCount.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Count number of objects — objectCount","text":"","code":"# vectors or vector-style classes objectCount(c(1, 2, 3)) # 3 #> [1] 3 objectCount(list(\"a\", \"b\")) # 2 #> [1] 2 objectCount(list(iris, mtcars)) # 2 #> [1] 2  # everything else objectCount(mtcars) # 1 #> [1] 1 objectCount(lm(wt ~ mpg, mtcars)) # 1 #> [1] 1 objectCount(new.env()) # 1 #> [1] 1"},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/op-null-default.html","id":null,"dir":"Reference","previous_headings":"","what":"Default value for NULL — op-null-default","title":"Default value for NULL — op-null-default","text":"Convenience function avoid testing NULL.","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/op-null-default.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Default value for NULL — op-null-default","text":"","code":"x %||% y"},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/op-null-default.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Default value for NULL — op-null-default","text":"x, y x NULL, return y; otherwise returns x.","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/op-null-default.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Default value for NULL — op-null-default","text":"first object NULL otherwise second object.","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/op-null-default.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Default value for NULL — op-null-default","text":"","code":"1 %||% 2 #> [1] 1 NULL %||% 2 #> [1] 2"},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/ospPrintClass.html","id":null,"dir":"Reference","previous_headings":"","what":"Print an object's class name — ospPrintClass","title":"Print an object's class name — ospPrintClass","text":"Prints class name object nice formatting using cli.","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/ospPrintClass.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print an object's class name — ospPrintClass","text":"","code":"ospPrintClass(x)"},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/ospPrintClass.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print an object's class name — ospPrintClass","text":"x R object","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/ospPrintClass.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print an object's class name — ospPrintClass","text":"Invisibly returns input object","code":""},{"path":[]},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/ospPrintClass.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print an object's class name — ospPrintClass","text":"","code":"# Print class name of a data frame ospPrintClass(iris) #> <data.frame>"},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/ospPrintHeader.html","id":null,"dir":"Reference","previous_headings":"","what":"Print a header with specified level — ospPrintHeader","title":"Print a header with specified level — ospPrintHeader","text":"Prints header specified level (H1, H2, H3) using cli.","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/ospPrintHeader.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print a header with specified level — ospPrintHeader","text":"","code":"ospPrintHeader(text, level = 1)"},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/ospPrintHeader.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print a header with specified level — ospPrintHeader","text":"text text print header level header level (1, 2, 3)","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/ospPrintHeader.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print a header with specified level — ospPrintHeader","text":"Invisibly returns NULL","code":""},{"path":[]},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/ospPrintHeader.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print a header with specified level — ospPrintHeader","text":"","code":"# Print different header levels ospPrintHeader(\"Main Title\", 1) #>  #> ── Main Title ────────────────────────────────────────────────────────────────── ospPrintHeader(\"Section Title\", 2) #>  #> ── Section Title ── #>  ospPrintHeader(\"Subsection Title\", 3) #> ── Subsection Title"},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/ospPrintItems.html","id":null,"dir":"Reference","previous_headings":"","what":"Print a list of items with an optional title — ospPrintItems","title":"Print a list of items with an optional title — ospPrintItems","text":"Prints list items vector list, optional title. Items indented prefixed dash.","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/ospPrintItems.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print a list of items with an optional title — ospPrintItems","text":"","code":"ospPrintItems(x, title = NULL, print_empty = FALSE)"},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/ospPrintItems.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print a list of items with an optional title — ospPrintItems","text":"x vector list title Optional title display list (default: NULL) print_empty Whether print empty values (NULL, NA, empty string) (default: FALSE)","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/ospPrintItems.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print a list of items with an optional title — ospPrintItems","text":"Invisibly returns input object","code":""},{"path":[]},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/ospPrintItems.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print a list of items with an optional title — ospPrintItems","text":"","code":"# Print a simple vector with title vector <- c(\"A\", \"B\", \"C\") ospPrintItems(vector, title = \"Letters\") #> Letters: #>   • A #>   • B #>   • C  # Print a named vector with title named_vector <- c(A = 1, B = 2, C = 3) ospPrintItems(named_vector, title = \"Letters\") #> Letters: #>   • A: 1 #>   • B: 2 #>   • C: 3  # Print a list including empty values list_with_nulls <- list(\"Min\" = NULL, \"Max\" = 100, \"Unit\" = NA) ospPrintItems(list_with_nulls, title = \"Parameters\", print_empty = TRUE) #> Parameters: #>   • Min: NULL #>   • Max: 100 #>   • Unit: NA"},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/ospsuiteUtilsSettingNames.html","id":null,"dir":"Reference","previous_headings":"","what":"Names of the settings stored in ospsuiteEnv. Can be used with getOSPSuiteUtilsSetting() — ospsuiteUtilsSettingNames","title":"Names of the settings stored in ospsuiteEnv. Can be used with getOSPSuiteUtilsSetting() — ospsuiteUtilsSettingNames","text":"Names settings stored ospsuiteEnv. Can used getOSPSuiteUtilsSetting()","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/ospsuiteUtilsSettingNames.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Names of the settings stored in ospsuiteEnv. Can be used with getOSPSuiteUtilsSetting() — ospsuiteUtilsSettingNames","text":"","code":"ospsuiteUtilsSettingNames"},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/ospsuiteUtilsSettingNames.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Names of the settings stored in ospsuiteEnv. Can be used with getOSPSuiteUtilsSetting() — ospsuiteUtilsSettingNames","text":"object class list length 5.","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/ospsuiteUtilsSettingNames.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Names of the settings stored in ospsuiteEnv. Can be used with getOSPSuiteUtilsSetting() — ospsuiteUtilsSettingNames","text":"","code":"ospsuiteUtilsSettingNames #> $packageName #> [1] \"packageName\" #>  #> $suiteName #> [1] \"suiteName\" #>  #> $logging #> [1] \"logging\" #>  #> $formatNumericsDigits #> [1] \"formatNumericsDigits\" #>  #> $LOG_SAFE_EPSILON #> [1] \"LOG_SAFE_EPSILON\" #>"},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/setErrorMasking.html","id":null,"dir":"Reference","previous_headings":"","what":"setErrorMasking — setErrorMasking","title":"setErrorMasking — setErrorMasking","text":"Mask error trace messages","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/setErrorMasking.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"setErrorMasking — setErrorMasking","text":"","code":"setErrorMasking(patterns)"},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/setErrorMasking.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"setErrorMasking — setErrorMasking","text":"patterns Character patterns identify grepl() masking messages","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/setErrorMasking.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"setErrorMasking — setErrorMasking","text":"","code":"if (FALSE) { # \\dontrun{ setErrorMasking(c(\"tryCatch\", \"withCallingHandlers\")) } # }"},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/setInfoMasking.html","id":null,"dir":"Reference","previous_headings":"","what":"setInfoMasking — setInfoMasking","title":"setInfoMasking — setInfoMasking","text":"Mask info messages","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/setInfoMasking.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"setInfoMasking — setInfoMasking","text":"","code":"setInfoMasking(patterns)"},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/setInfoMasking.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"setInfoMasking — setInfoMasking","text":"patterns Character patterns identify grepl() masking messages","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/setInfoMasking.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"setInfoMasking — setInfoMasking","text":"","code":"if (FALSE) { # \\dontrun{ # Mask ggplot2 message when line is used with 1 value per group setInfoMasking(\"Each group consists of only one observation\") } # }"},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/setLogFolder.html","id":null,"dir":"Reference","previous_headings":"","what":"setLogFolder — setLogFolder","title":"setLogFolder — setLogFolder","text":"Initialize logs settings","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/setLogFolder.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"setLogFolder — setLogFolder","text":"","code":"setLogFolder(logFolder = NULL)"},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/setLogFolder.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"setLogFolder — setLogFolder","text":"logFolder Optional folder path save log file","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/setWarningMasking.html","id":null,"dir":"Reference","previous_headings":"","what":"setWarningMasking — setWarningMasking","title":"setWarningMasking — setWarningMasking","text":"Mask warning messages","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/setWarningMasking.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"setWarningMasking — setWarningMasking","text":"","code":"setWarningMasking(patterns)"},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/setWarningMasking.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"setWarningMasking — setWarningMasking","text":"patterns Character patterns identify grepl() masking messages","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/setWarningMasking.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"setWarningMasking — setWarningMasking","text":"","code":"if (FALSE) { # \\dontrun{ # Mask ggplot2 warning message when missing values are found setWarningMasking(\"rows containing missing values\") } # }"},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/tic.html","id":null,"dir":"Reference","previous_headings":"","what":"tic — tic","title":"tic — tic","text":"Trigger time tracker","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/tic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"tic — tic","text":"","code":"tic()"},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/tic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"tic — tic","text":"System time","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/tic.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"tic — tic","text":"","code":"tic() #> [1] \"2025-07-25 12:36:06 UTC\""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/timeStamp.html","id":null,"dir":"Reference","previous_headings":"","what":"timeStamp — timeStamp","title":"timeStamp — timeStamp","text":"Print time stamp","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/timeStamp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"timeStamp — timeStamp","text":"","code":"timeStamp()"},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/timeStamp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"timeStamp — timeStamp","text":"","code":"timeStamp() #> [1] \"25/07/2025 - 12:36:06\""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/toList.html","id":null,"dir":"Reference","previous_headings":"","what":"Make sure the object is a list — toList","title":"Make sure the object is a list — toList","text":"Make sure object list","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/toList.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make sure the object is a list — toList","text":"","code":"toList(object)"},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/toList.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make sure the object is a list — toList","text":"object Object converted list.","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/toList.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make sure the object is a list — toList","text":".list(object) == TRUE, returns object; otherwise, list(object).","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/toList.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make sure the object is a list — toList","text":"","code":"toList(list(\"a\" = 1, \"b\" = 2)) #> $a #> [1] 1 #>  #> $b #> [1] 2 #>  toList(c(\"a\" = 1, \"b\" = 2)) #> [[1]] #> a b  #> 1 2  #>"},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/toMissingOfType.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert special constants to NA of desired type — toMissingOfType","title":"Convert special constants to NA of desired type — toMissingOfType","text":"Convert special constants NA desired type","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/toMissingOfType.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert special constants to NA of desired type — toMissingOfType","text":"","code":"toMissingOfType(x, type)"},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/toMissingOfType.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert special constants to NA of desired type — toMissingOfType","text":"x single element. type Type atomic vector returned.","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/toMissingOfType.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert special constants to NA of desired type — toMissingOfType","text":"Special constants (NULL, Inf, -Inf, NaN,  NA) converted NA desired type. function vectorized, therefore scalar values entered.","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/toMissingOfType.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert special constants to NA of desired type — toMissingOfType","text":"","code":"toMissingOfType(NA, type = \"real\") #> [1] NA toMissingOfType(NULL, type = \"integer\") #> [1] NA"},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/toc.html","id":null,"dir":"Reference","previous_headings":"","what":"toc — toc","title":"toc — toc","text":"Get elapsed time tic trigger now","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/toc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"toc — toc","text":"","code":"toc(tic, unit = \"min\")"},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/toc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"toc — toc","text":"tic Start time unit display unit elapsed time","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/toc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"toc — toc","text":"Character displaying elapsed time unit","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/toc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"toc — toc","text":"","code":"t0 <- tic() Sys.sleep(2) # Get elapsed time in seconds toc(t0, \"s\") #> [1] \"2.0 s\" # Get elapsed time in minutes toc(t0, \"min\") #> [1] \"0.0 min\""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/validateColumns.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate Data Frame Columns Against Specified Validations — validateColumns","title":"Validate Data Frame Columns Against Specified Validations — validateColumns","text":"function checks columns given data frame adhere specified validations defined columnSpecs. validates column's type, value range, allowed values, handles NULL NA values based configurations provided columnSpecs.","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/validateColumns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate Data Frame Columns Against Specified Validations — validateColumns","text":"","code":"validateColumns(object, columnSpecs)"},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/validateColumns.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate Data Frame Columns Against Specified Validations — validateColumns","text":"object #' @param object data frame, tibble, data.table whose columns validated. columnSpecs list specifying valid configurations column object. entry columnSpecs list containing type, allowedValues, valueRange, nullAllowed, naAllowed parameters column corresponds .","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/validateColumns.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate Data Frame Columns Against Specified Validations — validateColumns","text":"function explicitly return value. completes without error columns valid according columnSpecs. validation fails, generates descriptive error message, reporting failures multiple validations fail.","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/validateColumns.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Validate Data Frame Columns Against Specified Validations — validateColumns","text":"function iterates column name columnSpecs, retrieves corresponding column object, validates using validateVector. validation includes: Type correctness according type. Whether column values within specified valueRange (applicable). Whether column values among allowedValues (specified). Handling NULL NA based nullAllowed naAllowed flags.","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/validateColumns.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Validate Data Frame Columns Against Specified Validations — validateColumns","text":"","code":"df <- data.frame(   age = c(25L, 30L, NA),   BMI = c(22.5, 27.3, 24.9),   gender = c(\"M\", \"F\", \"F\"),   smoker = c(TRUE, FALSE, NA) )  columnSpecs <- list(   age = list(type = \"integer\", valueRange = c(18L, 65L), naAllowed = TRUE),   BMI = list(type = \"numeric\", valueRange = c(15.0, 40.0), naAllowed = TRUE),   gender = list(type = \"character\", allowedValues = c(\"M\", \"F\"), naAllowed = TRUE),   smoker = list(type = \"logical\", naAllowed = TRUE) )  validateColumns(df, columnSpecs) #> NULL"},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/validateEnumValue.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if value is in the given enum. If not, stops with an error. — validateEnumValue","title":"Check if value is in the given enum. If not, stops with an error. — validateEnumValue","text":"Check value given enum. , stops error.","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/validateEnumValue.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if value is in the given enum. If not, stops with an error. — validateEnumValue","text":"","code":"validateEnumValue(value, enum, nullAllowed = FALSE)"},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/validateEnumValue.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if value is in the given enum. If not, stops with an error. — validateEnumValue","text":"value value search enum. enum enum value contained. nullAllowed TRUE, value can NULL test always passes. FALSE (default), NULL accepted test fails.","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/validateEnumValue.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if value is in the given enum. If not, stops with an error. — validateEnumValue","text":"","code":"Symbol <- enum(c(Diamond = 1, Triangle = 2, Circle = 2)) validateEnumValue(1, Symbol) #> NULL"},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/validateIsFileUTF8.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate if a file is UTF-8 encoded. — validateIsFileUTF8","title":"Validate if a file is UTF-8 encoded. — validateIsFileUTF8","text":"Validate file UTF-8 encoded.","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/validateIsFileUTF8.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate if a file is UTF-8 encoded. — validateIsFileUTF8","text":"","code":"validateIsFileUTF8(file)"},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/validateIsFileUTF8.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate if a file is UTF-8 encoded. — validateIsFileUTF8","text":"file name file full path.","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/validateIsFileUTF8.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate if a file is UTF-8 encoded. — validateIsFileUTF8","text":"validations successful, validateIsFileUTF8() returns NULL. Otherwise, error signaled.","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/validateIsFileUTF8.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Validate if a file is UTF-8 encoded. — validateIsFileUTF8","text":"","code":"writeLines(c(\"Hello, world!\"), \"utf.txt\") writeLines(c(\"Hello, world!\", \"\\xb5g/L\"), \"non-utf.txt\")  validateIsFileUTF8(\"utf.txt\") # NULL #> NULL if (FALSE) { # \\dontrun{ validateIsFileUTF8(\"non-utf.txt\") # Error } # }"},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/validateIsOfType.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if the provided object is of certain type. If not, stop with an error. — validateIsOfType","title":"Check if the provided object is of certain type. If not, stop with an error. — validateIsOfType","text":"Check provided object certain type. , stop error.","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/validateIsOfType.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if the provided object is of certain type. If not, stop with an error. — validateIsOfType","text":"","code":"validateIsOfType(object, type, nullAllowed = FALSE)  validateIsCharacter(object, nullAllowed = FALSE)  validateIsString(object, nullAllowed = FALSE)  validateIsNumeric(object, nullAllowed = FALSE)  validateIsInteger(object, nullAllowed = FALSE)  validateIsLogical(object, nullAllowed = FALSE)"},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/validateIsOfType.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if the provided object is of certain type. If not, stop with an error. — validateIsOfType","text":"object object atomic vector list objects. type single string vector string representation class type checked . nullAllowed Boolean flag NULL accepted object. TRUE, NULL always returns TRUE, otherwise NULL returns FALSE. Default FALSE.","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/validateIsOfType.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if the provided object is of certain type. If not, stop with an error. — validateIsOfType","text":"NULL entered object expected type, otherwise produces error. Also accepts NULL input nullAllowed argument set TRUE.","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/validateIsOfType.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if the provided object is of certain type. If not, stop with an error. — validateIsOfType","text":"","code":"A <- data.frame(   col1 = c(1, 2, 3),   col2 = c(4, 5, 6),   col3 = c(7, 8, 9) )  validateIsOfType(A, \"data.frame\") #> NULL validateIsInteger(5) #> NULL validateIsNumeric(1.2) #> NULL validateIsCharacter(\"x\") #> NULL validateIsLogical(TRUE) #> NULL"},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/validateIsOption.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate Options Against Specified Valid Options — validateIsOption","title":"Validate Options Against Specified Valid Options — validateIsOption","text":"function checks given options adhere specified valid options. validates option's type, value range, allowed values, handles NULL NA values according configuration provided validOptions. automatically converts numeric options integers possible specified validOptions validation issues warning.","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/validateIsOption.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate Options Against Specified Valid Options — validateIsOption","text":"","code":"validateIsOption(options, validOptions)"},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/validateIsOption.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate Options Against Specified Valid Options — validateIsOption","text":"options list options validate. validOptions list specifying valid configurations option options. entry validOptions list containing type, allowedValues, valueRange, nullAllowed, naAllowed parameters option corresponds .","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/validateIsOption.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate Options Against Specified Valid Options — validateIsOption","text":"return value explicitly. Completes without error options valid according validOptions. validation fails, stops generates descriptive error message, reporting failures multiple validations fail.","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/validateIsOption.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Validate Options Against Specified Valid Options — validateIsOption","text":"function iterates option validOptions, retrieves corresponding value options, validates using validateVector. validation covers: Type correctness according type, automatic conversion numeric integer appropriate. Whether value within specified valueRange (applicable). Whether value among allowedValues (specified). Handling NULL NA based nullAllowed naAllowed flags.","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/validateIsOption.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Validate Options Against Specified Valid Options — validateIsOption","text":"","code":"options <- list(   optimizationMethod = \"genetic_algorithm\",   includeInteractions = TRUE,   maxIterations = 1000L,   convergenceThreshold = 0.02 )  validOptions <- list(   optimizationMethod = list(     type = \"character\", allowedValues = c(\"gradient_descent\", \"genetic_algorithm\")   ),   includeInteractions = list(type = \"logical\"),   maxIterations = list(type = \"integer\", valueRange = c(1L, 10000L)),   convergenceThreshold = list(type = \"numeric\", valueRange = c(0, 1)) )  validateIsOption(options, validOptions) #> NULL"},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/validatePathIsAbsolute.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if path is absolute — validatePathIsAbsolute","title":"Check if path is absolute — validatePathIsAbsolute","text":"Relative paths detected based presence wildcard character(*) path specification.","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/validatePathIsAbsolute.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if path is absolute — validatePathIsAbsolute","text":"","code":"validatePathIsAbsolute(path)"},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/validatePathIsAbsolute.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if path is absolute — validatePathIsAbsolute","text":"path valid file path name.","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/validatePathIsAbsolute.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if path is absolute — validatePathIsAbsolute","text":"Error case relative path found, otherwise output returned.","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/validatePathIsAbsolute.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if path is absolute — validatePathIsAbsolute","text":"","code":"# no error if path is absolute validatePathIsAbsolute(\"Organism|path\") #> NULL  # error otherwise # validatePathIsAbsolute(\"Organism|*path\")"},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/validateVector.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate Vector Against Specified Criteria — validateVector","title":"Validate Vector Against Specified Criteria — validateVector","text":"Validates vector x based specified criteria, including type correctness, value range, allowed values, handling NULL NA values. vector fails validation, informative error message thrown.","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/validateVector.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate Vector Against Specified Criteria — validateVector","text":"","code":"validateVector(   x,   type = NULL,   valueRange = NULL,   allowedValues = NULL,   nullAllowed = FALSE,   naAllowed = FALSE )  validateVectorRange(x, type, valueRange)  validateVectorValues(x, type, allowedValues = NULL, naAllowed = FALSE)"},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/validateVector.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate Vector Against Specified Criteria — validateVector","text":"x Vector validate. type Expected type elements x (\"numeric\", \"integer\", \"character\", \"factor\", \"logical\", \"Date\"). Type \"double\" treated \"numeric\". valueRange Optional vector length 2 specifying range allowed values x, applicable \"numeric\", \"integer\", \"character\", \"Date\" types. allowedValues Optional vector specifying set allowed values x. nullAllowed Logical flag indicating whether x can NULL. Defaults FALSE. naAllowed Logical flag indicating whether elements x can NA. Defaults FALSE.","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/validateVector.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate Vector Against Specified Criteria — validateVector","text":"return value explicitly stop descriptive error message validations fail.","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/validateVector.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Validate Vector Against Specified Criteria — validateVector","text":"validateVector primary function checking vector defined validation criteria. ensures x meets type, range, allowed value conditions specified. detailed validations related value range allowed values, validateVectorRange validateVectorValues functions utilized respectively.","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/reference/validateVector.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Validate Vector Against Specified Criteria — validateVector","text":"","code":"validateVector(x = 1:5, type = \"integer\") #> NULL validateVector(x = c(1.2, 2.5), type = \"numeric\", valueRange = c(1, 3)) #> NULL validateVector(x = c(\"a\", \"b\"), type = \"character\", allowedValues = c(\"a\", \"b\", \"c\")) #> NULL validateVector(   x = as.Date(\"2020-01-01\"), type = \"Date\",   valueRange = as.Date(c(\"2020-01-01\", \"2020-12-31\")) ) #> NULL  # Range validation examples validateVectorRange(x = c(5, 10), type = \"numeric\", valueRange = c(1, 10)) #> NULL validateVectorRange(x = c(\"a\", \"b\"), type = \"character\", valueRange = c(\"a\", \"c\")) #> NULL validateVectorRange(   x = as.Date(c(\"2020-01-01\")), type = \"Date\",   valueRange = as.Date(c(\"2020-01-01\", \"2020-12-31\")) ) #> NULL validateVectorRange(x = 1:3, type = \"integer\", valueRange = c(1L, 5L)) #> NULL  # Allowed values validation examples validateVectorValues(x = c(\"a\", \"b\"), type = \"character\", allowedValues = c(\"a\", \"b\", \"c\")) #> NULL validateVectorValues(x = c(2L, 4L), type = \"integer\", allowedValues = c(1L, 2L, 3L, 4L)) #> NULL validateVectorValues(x = c(TRUE), type = \"logical\", allowedValues = c(TRUE, FALSE)) #> NULL"},{"path":[]},{"path":[]},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/news/index.html","id":"major-changes-1-8-0","dir":"Changelog","previous_headings":"","what":"Major changes","title":"ospsuite.utils 1.8.0","text":"setLogFolder(): initialize/end logging system logCatch(): catch record messages, warnings, errors logError(), logWarning(), logInfo(), logDebug(): record errors, warnings, info debug messages logs.","code":""},{"path":[]},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/news/index.html","id":"major-changes-1-7-0","dir":"Changelog","previous_headings":"","what":"Major changes","title":"ospsuite.utils 1.7.0","text":"Class Printable deprecated, New functions ospPrintClass(), ospPrintItems(), ospPrintHeader() introduced replace Printable class.","code":""},{"path":[]},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/news/index.html","id":"minor-improvements-and-bug-fixes-1-6-1","dir":"Changelog","previous_headings":"","what":"Minor improvements and bug fixes","title":"ospsuite.utils 1.6.1","text":"Cloning method now enabled Printable R6 class. required make child classes cloneable dependent packages.","code":""},{"path":[]},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/news/index.html","id":"major-changes-1-6-0","dir":"Changelog","previous_headings":"","what":"Major changes","title":"ospsuite.utils 1.6.0","text":"validateIsOption() validate list options specified criteria, improving robustness option handling. function ensures options match expected types, value ranges, allowed values, handles NULL NA values. validateColumns() rigorous validation data frame columns predefined specifications. Supports validation type, value range, allowed values, manages NULL NA values effectively. validateVector() introduced comprehensive vector validation tool, allowing checks type, value range, predefined allowed values considerations NULL NA. Used validation functions validateIsOption() validateColumns(). validateVectorRange() validateVectorValues() provide detailed validation value ranges allowed values respectively. functions complement validateVector(). isFileUTF8() validateIsFileUTF8() provide validation assessing whether files UTF-8 encoded.","code":""},{"path":[]},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/news/index.html","id":"major-changes-1-5-0","dir":"Changelog","previous_headings":"","what":"Major changes","title":"ospsuite.utils 1.5.0","text":"logSafe() compute logarithm values close 0 slightly negative. foldSafe() compute x / y x y negative zero. values certain threshold epsilon substituted epsilon. NOTE: suited calculating fold differences negative numbers.","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/news/index.html","id":"minor-improvements-and-bug-fixes-1-5-0","dir":"Changelog","previous_headings":"","what":"Minor improvements and bug fixes","title":"ospsuite.utils 1.5.0","text":"print function Printable class now converts values using format function printing. E.g., numerical value “0.99999999” displayed “1”. https://github.com/Open-Systems-Pharmacology/OSPSuite.RUtils/issues/120","code":""},{"path":[]},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/news/index.html","id":"major-changes-1-4-23","dir":"Changelog","previous_headings":"","what":"Major changes","title":"ospsuite.utils 1.4.23","text":"ifEqual() ifIncluded() conditional values. flattenList() flatten list atomic vector desired type. toMissingOfType() convert special constants (NULL, Inf, NA, etc.) NA desired type.","code":""},{"path":[]},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/news/index.html","id":"major-changes-1-3-0","dir":"Changelog","previous_headings":"","what":"Major changes","title":"ospsuite.utils 1.3.0","text":"hasEmptyStrings() validateHasOnlyNonEmptyStrings() check empty strings. objectCount count number objects. validateHasOnlyDistinctValues() validate unique values present. validateIsFileExtension() validate file extensions. Cloning method now disabled Printable R6 class. entails cloneable property set Printable’s subclasses respected. Previously, case; cloning method available even subclass explicitly set cloneable = FALSE.","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/news/index.html","id":"minor-improvements-and-bug-fixes-1-3-0","dir":"Changelog","previous_headings":"","what":"Minor improvements and bug fixes","title":"ospsuite.utils 1.3.0","text":"Michael Sevestre new maintainer. package archived CRAN.","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/news/index.html","id":"ospsuiteutils-120","dir":"Changelog","previous_headings":"","what":"ospsuite.utils 1.2.0","title":"ospsuite.utils 1.2.0","text":"CRAN release: 2022-02-18","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/news/index.html","id":"major-changes-1-2-0","dir":"Changelog","previous_headings":"","what":"Major changes","title":"ospsuite.utils 1.2.0","text":"Removes alias hasUniqueValues(). messages used ospsuite package now ospsuit.utils (exported list messages). Adds isEmpty() validateIsNotEmpty() functions validate objects aren’t empty (#58; thanks @pchelle). Adds getOSPSuiteUtilsSetting() function get global settings (see enum ospsuiteUtilsSettingNames supported settings).","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/news/index.html","id":"minor-improvements-and-bug-fixes-1-2-0","dir":"Changelog","previous_headings":"","what":"Minor improvements and bug fixes","title":"ospsuite.utils 1.2.0","text":"Fixes regression isIncluded() previous release inadvertently removed support compound types (#63).","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/news/index.html","id":"ospsuiteutils-110","dir":"Changelog","previous_headings":"","what":"ospsuite.utils 1.1.0","title":"ospsuite.utils 1.1.0","text":"CRAN release: 2022-02-09","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/news/index.html","id":"major-changes-1-1-0","dir":"Changelog","previous_headings":"","what":"Major changes","title":"ospsuite.utils 1.1.0","text":"isIncluded() now accepts base types valid inputs. formatNumerics() now consistently returns output type \"character\".","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/news/index.html","id":"minor-improvements-and-bug-fixes-1-1-0","dir":"Changelog","previous_headings":"","what":"Minor improvements and bug fixes","title":"ospsuite.utils 1.1.0","text":"Improvements documentation. validateIsCharacter() added alias validateIsString() function. getEnumKey() added alias enumGetKey() function. hasOnlyDistinctValues() added alias hasUniqueValues() function. validateIsInteger() now works lists (#21).","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/dev/news/index.html","id":"ospsuiteutils-100","dir":"Changelog","previous_headings":"","what":"ospsuite.utils 1.0.0","title":"ospsuite.utils 1.0.0","text":"CRAN release: 2021-12-08 Initial release.","code":""}]
