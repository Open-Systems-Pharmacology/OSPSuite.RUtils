[{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":". Copyright holder, funder. Michael Sevestre. Author, maintainer. Pavel Balazki. Author. Juri Solodenko. Author. Indrajeet Patil. Author.            @patilindrajeets","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Sevestre M, Balazki P, Solodenko J, Patil (2023). ospsuite.utils: Utility Functions Open Systems Pharmacology R Packages. https://github.com/open-systems-pharmacology/OSPSuite.RUtils, https://www.open-systems-pharmacology.org/OSPSuite.RUtils/.","code":"@Manual{,   title = {ospsuite.utils: Utility Functions for Open Systems Pharmacology R Packages},   author = {Michael Sevestre and Pavel Balazki and Juri Solodenko and Indrajeet Patil},   year = {2023},   note = {https://github.com/open-systems-pharmacology/OSPSuite.RUtils, https://www.open-systems-pharmacology.org/OSPSuite.RUtils/}, }"},{"path":[]},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement michael@design2code.ca. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.1, available https://www.contributor-covenant.org/version/2/1/code_of_conduct.html. Community Impact Guidelines inspired [Mozilla’s code conduct enforcement ladder][https://github.com/mozilla/inclusion]. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":[]},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Utility Functions for Open Systems Pharmacology R Packages","text":"can install latest version package GitHub: Alternatively, can download built binaries .","code":"# install.packages(\"remotes\") remotes::install_github(\"Open-Systems-Pharmacology/OSPSuite.RUtils\")"},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/index.html","id":"introduction","dir":"","previous_headings":"","what":"Introduction","title":"Utility Functions for Open Systems Pharmacology R Packages","text":"package contains utility functions R packages Open Systems Pharmacology ecosystem: {ospsuite} {tlf} {ospsuite.reportingengine}","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/index.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Utility Functions for Open Systems Pharmacology R Packages","text":"Please note ospsuite.utils project released Contributor Code Conduct. contributing project, agree abide terms.","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 2, June 1991Copyright © 1989, 1991 Free Software Foundation, Inc.,51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"licenses software designed take away freedom share change . contrast, GNU General Public License intended guarantee freedom share change free software–make sure software free users. General Public License applies Free Software Foundation’s software program whose authors commit using . (Free Software Foundation software covered GNU Lesser General Public License instead.) can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge service wish), receive source code can get want , can change software use pieces new free programs; know can things. protect rights, need make restrictions forbid anyone deny rights ask surrender rights. restrictions translate certain responsibilities distribute copies software, modify . example, distribute copies program, whether gratis fee, must give recipients rights . must make sure , , receive can get source code. must show terms know rights. protect rights two steps: (1) copyright software, (2) offer license gives legal permission copy, distribute /modify software. Also, author’s protection , want make certain everyone understands warranty free software. software modified someone else passed , want recipients know original, problems introduced others reflect original authors’ reputations. Finally, free program threatened constantly software patents. wish avoid danger redistributors free program individually obtain patent licenses, effect making program proprietary. prevent , made clear patent must licensed everyone’s free use licensed . precise terms conditions copying, distribution modification follow.","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/LICENSE.html","id":"terms-and-conditions-for-copying-distribution-and-modification","dir":"","previous_headings":"","what":"TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION","title":"GNU General Public License","text":"0. License applies program work contains notice placed copyright holder saying may distributed terms General Public License. “Program”, , refers program work, “work based Program” means either Program derivative work copyright law: say, work containing Program portion , either verbatim modifications /translated another language. (Hereinafter, translation included without limitation term “modification”.) licensee addressed “”. Activities copying, distribution modification covered License; outside scope. act running Program restricted, output Program covered contents constitute work based Program (independent made running Program). Whether true depends Program . 1. may copy distribute verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice disclaimer warranty; keep intact notices refer License absence warranty; give recipients Program copy License along Program. may charge fee physical act transferring copy, may option offer warranty protection exchange fee. 2. may modify copy copies Program portion , thus forming work based Program, copy distribute modifications work terms Section 1 , provided also meet conditions: ) must cause modified files carry prominent notices stating changed files date change. b) must cause work distribute publish, whole part contains derived Program part thereof, licensed whole charge third parties terms License. c) modified program normally reads commands interactively run, must cause , started running interactive use ordinary way, print display announcement including appropriate copyright notice notice warranty (else, saying provide warranty) users may redistribute program conditions, telling user view copy License. (Exception: Program interactive normally print announcement, work based Program required print announcement.) requirements apply modified work whole. identifiable sections work derived Program, can reasonably considered independent separate works , License, terms, apply sections distribute separate works. distribute sections part whole work based Program, distribution whole must terms License, whose permissions licensees extend entire whole, thus every part regardless wrote . Thus, intent section claim rights contest rights work written entirely ; rather, intent exercise right control distribution derivative collective works based Program. addition, mere aggregation another work based Program Program (work based Program) volume storage distribution medium bring work scope License. 3. may copy distribute Program (work based , Section 2) object code executable form terms Sections 1 2 provided also one following: ) Accompany complete corresponding machine-readable source code, must distributed terms Sections 1 2 medium customarily used software interchange; , b) Accompany written offer, valid least three years, give third party, charge cost physically performing source distribution, complete machine-readable copy corresponding source code, distributed terms Sections 1 2 medium customarily used software interchange; , c) Accompany information received offer distribute corresponding source code. (alternative allowed noncommercial distribution received program object code executable form offer, accord Subsection b .) source code work means preferred form work making modifications . executable work, complete source code means source code modules contains, plus associated interface definition files, plus scripts used control compilation installation executable. However, special exception, source code distributed need include anything normally distributed (either source binary form) major components (compiler, kernel, ) operating system executable runs, unless component accompanies executable. distribution executable object code made offering access copy designated place, offering equivalent access copy source code place counts distribution source code, even though third parties compelled copy source along object code. 4. may copy, modify, sublicense, distribute Program except expressly provided License. attempt otherwise copy, modify, sublicense distribute Program void, automatically terminate rights License. However, parties received copies, rights, License licenses terminated long parties remain full compliance. 5. required accept License, since signed . However, nothing else grants permission modify distribute Program derivative works. actions prohibited law accept License. Therefore, modifying distributing Program (work based Program), indicate acceptance License , terms conditions copying, distributing modifying Program works based . 6. time redistribute Program (work based Program), recipient automatically receives license original licensor copy, distribute modify Program subject terms conditions. may impose restrictions recipients’ exercise rights granted herein. responsible enforcing compliance third parties License. 7. , consequence court judgment allegation patent infringement reason (limited patent issues), conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. distribute satisfy simultaneously obligations License pertinent obligations, consequence may distribute Program . example, patent license permit royalty-free redistribution Program receive copies directly indirectly , way satisfy License refrain entirely distribution Program. portion section held invalid unenforceable particular circumstance, balance section intended apply section whole intended apply circumstances. purpose section induce infringe patents property right claims contest validity claims; section sole purpose protecting integrity free software distribution system, implemented public license practices. Many people made generous contributions wide range software distributed system reliance consistent application system; author/donor decide willing distribute software system licensee impose choice. section intended make thoroughly clear believed consequence rest License. 8. distribution /use Program restricted certain countries either patents copyrighted interfaces, original copyright holder places Program License may add explicit geographical distribution limitation excluding countries, distribution permitted among countries thus excluded. case, License incorporates limitation written body License. 9. Free Software Foundation may publish revised /new versions General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies version number License applies “later version”, option following terms conditions either version later version published Free Software Foundation. Program specify version number License, may choose version ever published Free Software Foundation. 10. wish incorporate parts Program free programs whose distribution conditions different, write author ask permission. software copyrighted Free Software Foundation, write Free Software Foundation; sometimes make exceptions . decision guided two goals preserving free status derivatives free software promoting sharing reuse software generally.","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/LICENSE.html","id":"no-warranty","dir":"","previous_headings":"","what":"NO WARRANTY","title":"GNU General Public License","text":"11. PROGRAM LICENSED FREE CHARGE, WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION. 12. EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MAY MODIFY /REDISTRIBUTE PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES. END TERMS CONDITIONS","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively convey exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program interactive, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, commands use may called something show w show c; even mouse-clicks menu items–whatever suits program. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. sample; alter names: General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA. Gnomovision version 69, Copyright (C) year name of author Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'. This is free software, and you are welcome to redistribute it under certain conditions; type `show c' for details. Yoyodyne, Inc., hereby disclaims all copyright interest in the program `Gnomovision' (which makes passes at compilers) written by James Hacker.  <signature of Ty Coon>, 1 April 1989 Ty Coon, President of Vice"},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/reference/enum.html","id":null,"dir":"Reference","previous_headings":"","what":"Define an enumerated list — enum","title":"Define an enumerated list — enum","text":"Create enumeration used instead arbitrary values code. languages (C, C++, Python, etc.), enum (enumeration) data type consists integer constants ideal contexts variable can take one limited set possible values (e.g. day week). Since R programming language natively support enumeration, current function provides way create using lists.","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/reference/enum.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Define an enumerated list — enum","text":"","code":"enum(enumValues)"},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/reference/enum.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Define an enumerated list — enum","text":"enumValues vector list comma-separated constants use creating enum. Optionally, can named constants.","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/reference/enum.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Define an enumerated list — enum","text":"enumerated list.","code":""},{"path":[]},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/reference/enum.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Define an enumerated list — enum","text":"","code":"# Without predefined values Color <- enum(c(\"Red\", \"Blue\", \"Green\")) Color #> $Red #> [1] \"Red\" #>  #> $Blue #> [1] \"Blue\" #>  #> $Green #> [1] \"Green\" #>  myColor <- Color$Red myColor #> [1] \"Red\"  # With predefined values Symbol <- enum(c(Diamond = 1, Triangle = 2, Circle = 2)) Symbol #> $Diamond #> [1] 1 #>  #> $Triangle #> [1] 2 #>  #> $Circle #> [1] 2 #>   mySymbol <- Symbol$Diamond mySymbol #> [1] 1"},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/reference/enumGetKey.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the key mapped to the given value in an enum — enumGetKey","title":"Get the key mapped to the given value in an enum — enumGetKey","text":"Get key mapped given value enum","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/reference/enumGetKey.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the key mapped to the given value in an enum — enumGetKey","text":"","code":"enumGetKey(enum, value)  getEnumKey(enum, value)"},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/reference/enumGetKey.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the key mapped to the given value in an enum — enumGetKey","text":"enum enum key-value pair stored value value mapped key","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/reference/enumGetKey.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the key mapped to the given value in an enum — enumGetKey","text":"Key value stored. value enum, NULL returned.","code":""},{"path":[]},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/reference/enumGetKey.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the key mapped to the given value in an enum — enumGetKey","text":"","code":"Symbol <- enum(c(Diamond = 1, Triangle = 2, Circle = 2)) enumGetKey(Symbol, 1) #> [1] \"Diamond\""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/reference/enumGetValue.html","id":null,"dir":"Reference","previous_headings":"","what":"Get enum values — enumGetValue","title":"Get enum values — enumGetValue","text":"Return value stored given key. key present, error thrown.","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/reference/enumGetValue.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get enum values — enumGetValue","text":"","code":"enumGetValue(enum, key)"},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/reference/enumGetValue.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get enum values — enumGetValue","text":"enum enum contains key-value pair. key key value stored.","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/reference/enumGetValue.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get enum values — enumGetValue","text":"Value assigned key.","code":""},{"path":[]},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/reference/enumGetValue.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get enum values — enumGetValue","text":"","code":"Symbol <- enum(c(Diamond = 1, Triangle = 2, Circle = 2)) enumGetValue(Symbol, \"Diamond\") #> [1] 1"},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/reference/enumHasKey.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if an enum has a certain key. — enumHasKey","title":"Check if an enum has a certain key. — enumHasKey","text":"Check enum certain key.","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/reference/enumHasKey.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if an enum has a certain key. — enumHasKey","text":"","code":"enumHasKey(key, enum)"},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/reference/enumHasKey.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if an enum has a certain key. — enumHasKey","text":"key Key check . enum Enum look key.","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/reference/enumHasKey.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if an enum has a certain key. — enumHasKey","text":"TRUE key-value pair key exists, FALSE otherwise.","code":""},{"path":[]},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/reference/enumHasKey.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if an enum has a certain key. — enumHasKey","text":"","code":"Symbol <- enum(c(Diamond = 1, Triangle = 2, Circle = 2)) enumHasKey(\"Diamond\", Symbol) #> [1] TRUE enumHasKey(\"Square\", Symbol) #> [1] FALSE"},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/reference/enumKeys.html","id":null,"dir":"Reference","previous_headings":"","what":"Get all keys of an enum — enumKeys","title":"Get all keys of an enum — enumKeys","text":"Get keys enum","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/reference/enumKeys.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get all keys of an enum — enumKeys","text":"","code":"enumKeys(enum)"},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/reference/enumKeys.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get all keys of an enum — enumKeys","text":"enum enum containing keys.","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/reference/enumKeys.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get all keys of an enum — enumKeys","text":"List key names.","code":""},{"path":[]},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/reference/enumKeys.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get all keys of an enum — enumKeys","text":"","code":"Symbol <- enum(c(Diamond = 1, Triangle = 2, Circle = 2)) enumKeys(Symbol) #> [1] \"Diamond\"  \"Triangle\" \"Circle\""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/reference/enumPut.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a new key-value pairs to an enum — enumPut","title":"Add a new key-value pairs to an enum — enumPut","text":"Add new key-value pairs enum","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/reference/enumPut.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a new key-value pairs to an enum — enumPut","text":"","code":"enumPut(keys, values, enum, overwrite = FALSE)"},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/reference/enumPut.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a new key-value pairs to an enum — enumPut","text":"keys Keys values added values Values added enum enum specified key-value pairs added. WARNING: original object modified! overwrite TRUE value given keys exists, overwritten new value. Otherwise, error thrown. Default FALSE.","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/reference/enumPut.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add a new key-value pairs to an enum — enumPut","text":"Enum added key-value pair.","code":""},{"path":[]},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/reference/enumPut.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add a new key-value pairs to an enum — enumPut","text":"","code":"myEnum <- enum(c(a = \"b\")) myEnum <- enumPut(\"c\", \"d\", myEnum) myEnum <- enumPut(c(\"c\", \"d\", \"g\"), c(12, 2, \"a\"), myEnum, overwrite = TRUE)"},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/reference/enumRemove.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove an entry from the enum. — enumRemove","title":"Remove an entry from the enum. — enumRemove","text":"Remove entry enum.","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/reference/enumRemove.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove an entry from the enum. — enumRemove","text":"","code":"enumRemove(keys, enum)"},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/reference/enumRemove.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove an entry from the enum. — enumRemove","text":"keys Key(s) entries removed enum enum Enum entries removed WARNING: original object modified!","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/reference/enumRemove.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove an entry from the enum. — enumRemove","text":"Enum without removed entries.","code":""},{"path":[]},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/reference/enumRemove.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove an entry from the enum. — enumRemove","text":"","code":"Symbol <- enum(c(Diamond = 1, Triangle = 2, Circle = 2))  # either by key enumRemove(\"Diamond\", Symbol) #> $Triangle #> [1] 2 #>  #> $Circle #> [1] 2 #>   # or by position enumRemove(2L, Symbol) #> $Diamond #> [1] 1 #>  #> $Circle #> [1] 2 #>"},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/reference/enumValues.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the values stored in an enum — enumValues","title":"Get the values stored in an enum — enumValues","text":"Get values stored enum","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/reference/enumValues.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the values stored in an enum — enumValues","text":"","code":"enumValues(enum)"},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/reference/enumValues.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the values stored in an enum — enumValues","text":"enum enum containing values","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/reference/enumValues.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the values stored in an enum — enumValues","text":"List values stored enum.","code":""},{"path":[]},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/reference/enumValues.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the values stored in an enum — enumValues","text":"","code":"Symbol <- enum(c(Diamond = 1, Triangle = 2, Circle = 2)) enumValues(Symbol) #> [1] 1 2 2"},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/reference/flattenList.html","id":null,"dir":"Reference","previous_headings":"","what":"Flatten a list to an atomic vector of desired type — flattenList","title":"Flatten a list to an atomic vector of desired type — flattenList","text":"Flatten list atomic vector desired type","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/reference/flattenList.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Flatten a list to an atomic vector of desired type — flattenList","text":"","code":"flattenList(x, type)"},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/reference/flattenList.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Flatten a list to an atomic vector of desired type — flattenList","text":"x list atomic vector. latter, change made. type Type atomic vector returned.","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/reference/flattenList.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Flatten a list to an atomic vector of desired type — flattenList","text":"atomic vector desired type.","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/reference/flattenList.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Flatten a list to an atomic vector of desired type — flattenList","text":"type argument decide variant purrr::flatten() family used flatten list.","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/reference/flattenList.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Flatten a list to an atomic vector of desired type — flattenList","text":"","code":"flattenList(list(1, 2, 3, NA), type = \"numeric\") #> [1]  1  2  3 NA flattenList(list(TRUE, FALSE, NA), type = \"integer\") #> [1]  1  0 NA"},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/reference/foldSafe.html","id":null,"dir":"Reference","previous_headings":"","what":"Safe fold calculation — foldSafe","title":"Safe fold calculation — foldSafe","text":"Calculates x / y substituting values epsilon (x y) epsilon. x y must length","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/reference/foldSafe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Safe fold calculation — foldSafe","text":"","code":"foldSafe(x, y, epsilon = ospsuiteUtilsEnv$LOG_SAFE_EPSILON)"},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/reference/foldSafe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Safe fold calculation — foldSafe","text":"x numeric vector numerics. y numeric vector numerics. epsilon small number considered threshold values treated epsilon. Allows computation fold changes values close 0. Default value getOSPSuiteUtilsSetting(\"LOG_SAFE_EPSILON\").","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/reference/foldSafe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Safe fold calculation — foldSafe","text":"vector x / y.","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/reference/foldSafe.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Safe fold calculation — foldSafe","text":"","code":"inputX <- c(NA, 1, 5, 0, -1) inputY <- c(1, -1, NA, 0, -1) folds <- foldSafe(inputX, inputY)"},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/reference/formatNumerics.html","id":null,"dir":"Reference","previous_headings":"","what":"formatNumerics — formatNumerics","title":"formatNumerics — formatNumerics","text":"Render numeric values object character using specified format: object data.frame list, formatNumerics applies fields object type character integer, formatNumerics renders values object type numeric, formatNumerics applies defined format","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/reference/formatNumerics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"formatNumerics — formatNumerics","text":"","code":"formatNumerics(   object,   digits = ospsuiteUtilsEnv$formatNumericsDigits,   scientific = FALSE )"},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/reference/formatNumerics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"formatNumerics — formatNumerics","text":"object R object list, data.frame, character numeric values. digits Number decimal digits render scientific Logical value defining scientific writing rendered","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/reference/formatNumerics.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"formatNumerics — formatNumerics","text":"Numeric values rendered character values. object data.frame list, data.frame list returned numeric values rendered character values.","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/reference/formatNumerics.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"formatNumerics — formatNumerics","text":"","code":"# Format array of numeric values formatNumerics(log(c(12, 15, 0.3)), digits = 1, scientific = TRUE) #> [1] \"2.5e+00\"  \"2.7e+00\"  \"-1.2e+00\"  # Format a data.frame x <- data.frame(parameter = c(\"a\", \"b\", \"c\"), value = c(1, 110.4, 6.666)) formatNumerics(x, digits = 2, scientific = FALSE) #>   parameter  value #> 1         a   1.00 #> 2         b 110.40 #> 3         c   6.67"},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/reference/getOSPSuiteUtilsSetting.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the value of a global {ospsuite.utils} package setting. — getOSPSuiteUtilsSetting","title":"Get the value of a global {ospsuite.utils} package setting. — getOSPSuiteUtilsSetting","text":"Get value global {ospsuite.utils} package setting.","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/reference/getOSPSuiteUtilsSetting.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the value of a global {ospsuite.utils} package setting. — getOSPSuiteUtilsSetting","text":"","code":"getOSPSuiteUtilsSetting(settingName)"},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/reference/getOSPSuiteUtilsSetting.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the value of a global {ospsuite.utils} package setting. — getOSPSuiteUtilsSetting","text":"settingName String name setting","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/reference/getOSPSuiteUtilsSetting.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the value of a global {ospsuite.utils} package setting. — getOSPSuiteUtilsSetting","text":"Value setting stored ospsuiteEnv. setting exist, error thrown.","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/reference/getOSPSuiteUtilsSetting.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the value of a global {ospsuite.utils} package setting. — getOSPSuiteUtilsSetting","text":"","code":"getOSPSuiteUtilsSetting(\"packageName\") #> [1] \"ospsuite.utils\" getOSPSuiteUtilsSetting(\"suiteName\") #> [1] \"Open Systems Pharmacology\" getOSPSuiteUtilsSetting(\"formatNumericsDigits\") #> [1] 2"},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/reference/hasEmptyStrings.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate that no empty string is present — hasEmptyStrings","title":"Validate that no empty string is present — hasEmptyStrings","text":"Validate empty string present","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/reference/hasEmptyStrings.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate that no empty string is present — hasEmptyStrings","text":"","code":"hasEmptyStrings(x)  validateHasOnlyNonEmptyStrings(x)"},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/reference/hasEmptyStrings.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate that no empty string is present — hasEmptyStrings","text":"x character string vector character strings.","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/reference/hasEmptyStrings.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate that no empty string is present — hasEmptyStrings","text":"hasEmptyStrings() returns TRUE strings empty; FALSE otherwise. validateHasOnlyNonEmptyStrings() produces error empty string present. returns NULL otherwise.","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/reference/hasEmptyStrings.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Validate that no empty string is present — hasEmptyStrings","text":"following conditions met, input string considered empty: NAs present (e.g. x = c(\"\", \"abc\", NA)) string empty (e.g. x = list(\"\", \"abc\", \"\")) length 0 (e.g. x = character())","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/reference/hasEmptyStrings.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Validate that no empty string is present — hasEmptyStrings","text":"","code":"hasEmptyStrings(c(\"x\", \"y\")) # FALSE #> [1] FALSE hasEmptyStrings(list(\"x\", \"y\")) # FALSE #> [1] FALSE hasEmptyStrings(\"   abc   \") # FALSE #> [1] FALSE hasEmptyStrings(c(\"\", \"y\")) # TRUE #> [1] TRUE hasEmptyStrings(list(\"\", \"y\")) # TRUE #> [1] TRUE hasEmptyStrings(NA) # TRUE #> [1] TRUE hasEmptyStrings(character(0)) # TRUE #> [1] TRUE hasEmptyStrings(c(NA, \"x\", \"y\")) # TRUE #> [1] TRUE  validateHasOnlyNonEmptyStrings(c(\"x\", \"y\")) # NULL validateHasOnlyNonEmptyStrings(list(\"x\", \"y\")) # NULL validateHasOnlyNonEmptyStrings(\"   abc   \") # NULL # validateHasOnlyNonEmptyStrings(c(\"\", \"y\")) # error # validateHasOnlyNonEmptyStrings(list(\"\", \"y\")) # error # validateHasOnlyNonEmptyStrings(NA) # error # validateHasOnlyNonEmptyStrings(character(0)) # error # validateHasOnlyNonEmptyStrings(c(NA, \"x\", \"y\")) # error"},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/reference/hasOnlyDistinctValues.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate that a vector has only unique values — hasOnlyDistinctValues","title":"Validate that a vector has only unique values — hasOnlyDistinctValues","text":"Validate vector unique values","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/reference/hasOnlyDistinctValues.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate that a vector has only unique values — hasOnlyDistinctValues","text":"","code":"hasOnlyDistinctValues(values, na.rm = TRUE)  validateHasOnlyDistinctValues(values, na.rm = TRUE)"},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/reference/hasOnlyDistinctValues.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate that a vector has only unique values — hasOnlyDistinctValues","text":"values array values na.rm Logical decide missing values removed duplicate checking. Note duplicate NA values flagged na.rm=FALSE.","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/reference/hasOnlyDistinctValues.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate that a vector has only unique values — hasOnlyDistinctValues","text":"hasOnlyDistinctValues returns TRUE values unique. validateHasOnlyDistinctValues() returns NULL unique values present, otherwise produces error.","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/reference/hasOnlyDistinctValues.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Validate that a vector has only unique values — hasOnlyDistinctValues","text":"","code":"hasOnlyDistinctValues(c(\"x\", \"y\")) #> [1] TRUE hasOnlyDistinctValues(c(\"x\", \"y\", \"x\")) #> [1] FALSE hasOnlyDistinctValues(c(\"x\", NA, \"y\", NA), na.rm = FALSE) #> [1] FALSE hasOnlyDistinctValues(c(\"x\", NA, \"y\", NA), na.rm = TRUE) #> [1] TRUE  validateHasOnlyDistinctValues(c(\"x\", \"y\")) # NULL #> NULL # validateHasOnlyDistinctValues(c(\"x\", \"y\", \"x\")) # error"},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/reference/ifEqual.html","id":null,"dir":"Reference","previous_headings":"","what":"Value conditional on equality — ifEqual","title":"Value conditional on equality — ifEqual","text":"Short-key checking arguments 1 2 equal, output argument 3 equal, output argument 4 otherwise.","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/reference/ifEqual.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Value conditional on equality — ifEqual","text":"","code":"ifEqual(x, y, outputIfEqual, outputIfNotEqual = NULL)"},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/reference/ifEqual.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Value conditional on equality — ifEqual","text":"x argument 1 y argument 2 outputIfEqual argument 3 outputIfNotEqual argument 4","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/reference/ifEqual.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Value conditional on equality — ifEqual","text":"","code":"ifEqual(1, 1, \"x\", \"y\") # \"x\" #> [1] \"x\" ifEqual(1, 2, \"x\", \"y\") # \"y\" #> [1] \"y\""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/reference/ifIncluded.html","id":null,"dir":"Reference","previous_headings":"","what":"Value conditional on inclusion — ifIncluded","title":"Value conditional on inclusion — ifIncluded","text":"Shortkey checking arguments 1 included 2, output argument 3 included, output argument 4 otherwise.","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/reference/ifIncluded.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Value conditional on inclusion — ifIncluded","text":"","code":"ifIncluded(x, y, outputIfIncluded, outputIfNotIncluded = NULL)"},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/reference/ifIncluded.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Value conditional on inclusion — ifIncluded","text":"x argument 1 y argument 2 outputIfIncluded argument 3 outputIfNotIncluded argument 4","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/reference/ifIncluded.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Value conditional on inclusion — ifIncluded","text":"","code":"ifIncluded(\"a\", c(\"a\", \"b\"), 1, 2) # 1 #> [1] 1 ifIncluded(\"x\", c(\"a\", \"b\"), 1, 2) # 2 #> [1] 2"},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/reference/ifNotNull.html","id":null,"dir":"Reference","previous_headings":"","what":"Value conditional on NULL — ifNotNull","title":"Value conditional on NULL — ifNotNull","text":"Short-key checking argument 1 NULL, output argument 2 null, output argument 3 otherwise. Check condition NULL, output outputIfNotNull, otherwise, output outputIfNull.","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/reference/ifNotNull.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Value conditional on NULL — ifNotNull","text":"","code":"ifNotNull(condition, outputIfNotNull, outputIfNull = NULL)"},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/reference/ifNotNull.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Value conditional on NULL — ifNotNull","text":"condition argument 1 outputIfNotNull argument 2 outputIfNull argument 3","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/reference/ifNotNull.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Value conditional on NULL — ifNotNull","text":"outputIfNotNull condition NULL, outputIfNull otherwise.","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/reference/ifNotNull.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Value conditional on NULL — ifNotNull","text":"","code":"ifNotNull(NULL, \"x\") #> NULL ifNotNull(NULL, \"x\", \"y\") #> [1] \"y\" ifNotNull(1 < 2, \"x\", \"y\") #> [1] \"x\""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/reference/isEmpty.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate if the provided object is empty — isEmpty","title":"Validate if the provided object is empty — isEmpty","text":"Validate provided object empty","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/reference/isEmpty.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate if the provided object is empty — isEmpty","text":"","code":"isEmpty(object)  validateIsNotEmpty(object)"},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/reference/isEmpty.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate if the provided object is empty — isEmpty","text":"object object atomic vector list objects.","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/reference/isEmpty.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate if the provided object is empty — isEmpty","text":"isEmpty() returns TRUE object empty; FALSE otherwise. validateIsNotEmpty() returns NULL validation successful. Otherwise, error signaled.","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/reference/isEmpty.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Validate if the provided object is empty — isEmpty","text":"","code":"# empty list or data.frame isEmpty(NULL) #> [1] TRUE isEmpty(numeric()) #> [1] TRUE isEmpty(list()) #> [1] TRUE isEmpty(data.frame()) #> [1] TRUE  # accounts for filtering of arrays and data.frame df <- data.frame(x = c(1, 2, 3), y = c(4, 5, 6)) isEmpty(df) #> [1] FALSE isEmpty(df$x[FALSE]) #> [1] TRUE isEmpty(df[FALSE, ]) #> [1] TRUE  # validation helper validateIsNotEmpty(list(1, 2)) # NULL #> NULL # validateIsNotEmpty(NULL) # error"},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/reference/isFileExtension.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate if the provided path has required extension — isFileExtension","title":"Validate if the provided path has required extension — isFileExtension","text":"Validate provided path required extension","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/reference/isFileExtension.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate if the provided path has required extension — isFileExtension","text":"","code":"isFileExtension(file, extension)  validateIsFileExtension(file, extension)"},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/reference/isFileExtension.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate if the provided path has required extension — isFileExtension","text":"file name file full path. extension required extension file.","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/reference/isFileExtension.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate if the provided path has required extension — isFileExtension","text":"isFileExtension() returns TRUE file name (full path) includes extension. validations successful, validateIsFileExtension() returns NULL. Otherwise, error signaled.","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/reference/isFileExtension.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Validate if the provided path has required extension — isFileExtension","text":"","code":"isFileExtension(\"enum.R\", \"R\") # TRUE #> [1] TRUE isFileExtension(\"enum.R\", \"pkml\") # FALSE #> [1] FALSE  validateIsFileExtension(\"enum.R\", \"R\") # NULL #> NULL # validateIsFileExtension(\"enum.R\", \"pkml\") # error"},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/reference/isIncluded.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if a vector of values is included in another vector of values — isIncluded","title":"Check if a vector of values is included in another vector of values — isIncluded","text":"Check vector values included another vector values","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/reference/isIncluded.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if a vector of values is included in another vector of values — isIncluded","text":"","code":"isIncluded(values, parentValues)  validateIsIncluded(values, parentValues, nullAllowed = FALSE)"},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/reference/isIncluded.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if a vector of values is included in another vector of values — isIncluded","text":"values vector values. parentValues vector values values checked inclusion. nullAllowed Boolean flag NULL accepted object. TRUE, NULL always returns TRUE, otherwise NULL returns FALSE. Default FALSE.","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/reference/isIncluded.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if a vector of values is included in another vector of values — isIncluded","text":"isIncluded() returns TRUE value values (vector) present parentValues; FALSE otherwise. validateIsIncluded() returns NULL child value included parent value set, otherwise error signaled.","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/reference/isIncluded.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if a vector of values is included in another vector of values — isIncluded","text":"","code":"# check if a column is present in dataframe A <- data.frame(   col1 = c(1, 2, 3),   col2 = c(4, 5, 6),   col3 = c(7, 8, 9) ) isIncluded(\"col3\", names(A)) # TRUE #> [1] TRUE  # check if single element is present in a vector (atomic or non-atomic) isIncluded(\"x\", list(\"w\", \"x\", 1, 2)) # TRUE #> [1] TRUE isIncluded(\"x\", c(\"w\", \"a\", \"y\")) # FALSE #> [1] FALSE  # check if **all** values (if it's a vector) are contained in parent values isIncluded(c(\"x\", \"y\"), c(\"a\", \"y\", \"b\", \"x\")) # TRUE #> [1] TRUE isIncluded(list(\"x\", 1), list(\"a\", \"b\", \"x\", 1)) # TRUE #> [1] TRUE isIncluded(c(\"x\", \"y\"), c(\"a\", \"b\", \"x\")) # FALSE #> [1] FALSE isIncluded(list(\"x\", 1), list(\"a\", \"b\", \"x\")) # FALSE #> [1] FALSE  # corresponding validation validateIsIncluded(\"col3\", names(A)) # NULL #> NULL # validateIsIncluded(\"col6\", names(A)) # error"},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/reference/isOfLength.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if the provided object has expected length — isOfLength","title":"Check if the provided object has expected length — isOfLength","text":"Check provided object expected length","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/reference/isOfLength.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if the provided object has expected length — isOfLength","text":"","code":"isOfLength(object, nbElements)  validateIsOfLength(object, nbElements)"},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/reference/isOfLength.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if the provided object has expected length — isOfLength","text":"object object list objects nbElements number elements supposed object","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/reference/isOfLength.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if the provided object has expected length — isOfLength","text":"isOfLength() returns TRUE object objects inside list nbElements. validateIsOfLength(), validations successful, NULL returned. Otherwise, error signaled.","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/reference/isOfLength.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Check if the provided object has expected length — isOfLength","text":"first level given list considered.","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/reference/isOfLength.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if the provided object has expected length — isOfLength","text":"","code":"df <- data.frame(x = c(1, 2, 3))  isOfLength(df, 1) # TRUE #> [1] TRUE isOfLength(df, 3) # FALSE #> [1] FALSE  validateIsOfLength(list(1, 2), 2L) # NULL #> NULL # validateIsOfLength(c(\"3\", \"4\"), 3L) # error"},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/reference/isOfType.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if the provided object is of certain type — isOfType","title":"Check if the provided object is of certain type — isOfType","text":"Check provided object certain type","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/reference/isOfType.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if the provided object is of certain type — isOfType","text":"","code":"isOfType(object, type, nullAllowed = FALSE)"},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/reference/isOfType.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if the provided object is of certain type — isOfType","text":"object object atomic vector list objects. type single string vector string representation class type checked . nullAllowed Boolean flag NULL accepted object. TRUE, NULL always returns TRUE, otherwise NULL returns FALSE. Default FALSE.","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/reference/isOfType.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if the provided object is of certain type — isOfType","text":"TRUE object objects inside list given type.","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/reference/isOfType.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Check if the provided object is of certain type — isOfType","text":"first level given list considered.","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/reference/isOfType.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if the provided object is of certain type — isOfType","text":"","code":"# checking type of a single object df <- data.frame(x = c(1, 2, 3)) isOfType(df, \"data.frame\") #> [1] TRUE"},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/reference/isSameLength.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate if objects are of same length — isSameLength","title":"Validate if objects are of same length — isSameLength","text":"Validate objects length","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/reference/isSameLength.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate if objects are of same length — isSameLength","text":"","code":"isSameLength(...)  validateIsSameLength(...)"},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/reference/isSameLength.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate if objects are of same length — isSameLength","text":"... Objects compare.","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/reference/isSameLength.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate if objects are of same length — isSameLength","text":"isSameLength() returns TRUE objects lengths. validateIsSameLength(), validations successful, NULL returned. Otherwise, error signaled.","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/reference/isSameLength.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Validate if objects are of same length — isSameLength","text":"","code":"# compare length of only 2 objects isSameLength(mtcars, ToothGrowth) # FALSE #> [1] FALSE isSameLength(cars, BOD) # TRUE #> [1] TRUE  # or more number of objects isSameLength(c(1, 2), c(TRUE, FALSE), c(\"x\", \"y\")) # TRUE #> [1] TRUE isSameLength(list(1, 2), list(TRUE, FALSE), list(\"x\")) # FALSE #> [1] FALSE  # validation validateIsSameLength(list(1, 2), c(\"3\", \"4\")) # NULL #> NULL # validateIsSameLength(list(1, 2), c(\"3\", \"4\"), c(FALSE)) # error"},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/reference/logSafe.html","id":null,"dir":"Reference","previous_headings":"","what":"Computes logarithm of a number or of a vector of numbers and handles zeros while\r\nsubstituting all values below epsilon by epsilon. — logSafe","title":"Computes logarithm of a number or of a vector of numbers and handles zeros while\r\nsubstituting all values below epsilon by epsilon. — logSafe","text":"Computes logarithm number vector numbers handles zeros substituting values epsilon epsilon.","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/reference/logSafe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Computes logarithm of a number or of a vector of numbers and handles zeros while\r\nsubstituting all values below epsilon by epsilon. — logSafe","text":"","code":"logSafe(x, base = exp(1), epsilon = ospsuiteUtilsEnv$LOG_SAFE_EPSILON)"},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/reference/logSafe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Computes logarithm of a number or of a vector of numbers and handles zeros while\r\nsubstituting all values below epsilon by epsilon. — logSafe","text":"x numeric vector numerics. base positive complex number: base respect logarithms computed. Defaults e = exp(1). epsilon small number considered threshold values treated epsilon. Allows computation log close 0. Default value getOSPSuiteUtilsSetting(\"LOG_SAFE_EPSILON\").","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/reference/logSafe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Computes logarithm of a number or of a vector of numbers and handles zeros while\r\nsubstituting all values below epsilon by epsilon. — logSafe","text":"log(x, base = base) x > epsilon, log(epsilon, base = base), NA_real_ NA elements.","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/reference/logSafe.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Computes logarithm of a number or of a vector of numbers and handles zeros while\r\nsubstituting all values below epsilon by epsilon. — logSafe","text":"","code":"inputVector <- c(NA, 1, 5, 0, -1) logSafe(inputVector) #> [1]         NA   0.000000   1.609438 -46.051702 -46.051702"},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/reference/messages.html","id":null,"dir":"Reference","previous_headings":"","what":"List of functions and strings used to signal error messages — messages","title":"List of functions and strings used to signal error messages — messages","text":"messages relevant context OSP R package ecosystem.","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/reference/messages.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List of functions and strings used to signal error messages — messages","text":"","code":"messages"},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/reference/messages.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"List of functions and strings used to signal error messages — messages","text":"object class list length 34.","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/reference/messages.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List of functions and strings used to signal error messages — messages","text":"string error message.","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/reference/messages.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List of functions and strings used to signal error messages — messages","text":"","code":"# example with string messages$errorEnumNotAllNames #> [1] \"The enumValues has some but not all names assigned. They must be all assigned or none assigned\"  # example with function messages$errorPropertyReadOnly(\"age\") #> [1] \"Property '$age' is readonly\""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/reference/objectCount.html","id":null,"dir":"Reference","previous_headings":"","what":"Count number of objects — objectCount","title":"Count number of objects — objectCount","text":"Count number objects","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/reference/objectCount.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Count number of objects — objectCount","text":"","code":"objectCount(x)"},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/reference/objectCount.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Count number of objects — objectCount","text":"x object (atomic vector, list, instance(s) class).","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/reference/objectCount.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Count number of objects — objectCount","text":"Integer representing count objects.","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/reference/objectCount.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Count number of objects — objectCount","text":"Classes R can roughly distinguished following: Vector-style classes property length() represents number elements (e.g., factor, list, etc.). Record-style (dataframe scalar) classes, hand, complex structures represent single thing (e.g., data.frame, R6, lm, etc.). function counts objects differently depending entered class: argument vector vector-style class, return output length() function. Otherwise, returns 1. example, length(mtcars) returns 11, objectCount(mtcars) return 1, length(list(1, 2)) returns 2, objectCount(list(1, 2)) return 2 well.","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/reference/objectCount.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Count number of objects — objectCount","text":"","code":"# vectors or vector-style classes objectCount(c(1, 2, 3)) # 3 #> [1] 3 objectCount(list(\"a\", \"b\")) # 2 #> [1] 2 objectCount(list(iris, mtcars)) # 2 #> [1] 2  # everything else objectCount(mtcars) # 1 #> [1] 1 objectCount(lm(wt ~ mpg, mtcars)) # 1 #> [1] 1 objectCount(new.env()) # 1 #> [1] 1"},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/reference/op-null-default.html","id":null,"dir":"Reference","previous_headings":"","what":"Default value for NULL — op-null-default","title":"Default value for NULL — op-null-default","text":"Convenience function avoid testing NULL.","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/reference/op-null-default.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Default value for NULL — op-null-default","text":"","code":"x %||% y"},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/reference/op-null-default.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Default value for NULL — op-null-default","text":"x, y x NULL, return y; otherwise returns x.","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/reference/op-null-default.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Default value for NULL — op-null-default","text":"first object NULL otherwise second object.","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/reference/op-null-default.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Default value for NULL — op-null-default","text":"","code":"1 %||% 2 #> [1] 1 NULL %||% 2 #> [1] 2"},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/reference/ospsuiteUtilsSettingNames.html","id":null,"dir":"Reference","previous_headings":"","what":"Names of the settings stored in ospsuiteEnv. Can be used with\r\ngetOSPSuiteUtilsSetting() — ospsuiteUtilsSettingNames","title":"Names of the settings stored in ospsuiteEnv. Can be used with\r\ngetOSPSuiteUtilsSetting() — ospsuiteUtilsSettingNames","text":"Names settings stored ospsuiteEnv. Can used getOSPSuiteUtilsSetting()","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/reference/ospsuiteUtilsSettingNames.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Names of the settings stored in ospsuiteEnv. Can be used with\r\ngetOSPSuiteUtilsSetting() — ospsuiteUtilsSettingNames","text":"","code":"ospsuiteUtilsSettingNames"},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/reference/ospsuiteUtilsSettingNames.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Names of the settings stored in ospsuiteEnv. Can be used with\r\ngetOSPSuiteUtilsSetting() — ospsuiteUtilsSettingNames","text":"object class list length 4.","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/reference/ospsuiteUtilsSettingNames.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Names of the settings stored in ospsuiteEnv. Can be used with\r\ngetOSPSuiteUtilsSetting() — ospsuiteUtilsSettingNames","text":"","code":"ospsuiteUtilsSettingNames #> $packageName #> [1] \"packageName\" #>  #> $suiteName #> [1] \"suiteName\" #>  #> $formatNumericsDigits #> [1] \"formatNumericsDigits\" #>  #> $LOG_SAFE_EPSILON #> [1] \"LOG_SAFE_EPSILON\" #>"},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/reference/Printable.html","id":null,"dir":"Reference","previous_headings":"","what":"Printable — Printable","title":"Printable — Printable","text":"Base class implements basic properties printing console.","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/reference/Printable.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Printable — Printable","text":"","code":"myPrintable <- R6::R6Class(   \"myPrintable\",   inherit = Printable,   public = list(     x = NULL,     y = NULL,     print = function() {       private$printClass()       private$printLine(\"x\", self$x)       private$printLine(\"y\", self$y)       invisible(self)     }   ) )  x <- myPrintable$new() x #> myPrintable:  #>    x: NULL  #>    y: NULL"},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/reference/toList.html","id":null,"dir":"Reference","previous_headings":"","what":"Make sure the object is a list — toList","title":"Make sure the object is a list — toList","text":"Make sure object list","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/reference/toList.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make sure the object is a list — toList","text":"","code":"toList(object)"},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/reference/toList.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make sure the object is a list — toList","text":"object Object converted list.","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/reference/toList.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make sure the object is a list — toList","text":".list(object) == TRUE, returns object; otherwise, list(object).","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/reference/toList.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make sure the object is a list — toList","text":"","code":"toList(list(\"a\" = 1, \"b\" = 2)) #> $a #> [1] 1 #>  #> $b #> [1] 2 #>  toList(c(\"a\" = 1, \"b\" = 2)) #> [[1]] #> a b  #> 1 2  #>"},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/reference/toMissingOfType.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert special constants to NA of desired type — toMissingOfType","title":"Convert special constants to NA of desired type — toMissingOfType","text":"Convert special constants NA desired type","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/reference/toMissingOfType.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert special constants to NA of desired type — toMissingOfType","text":"","code":"toMissingOfType(x, type)"},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/reference/toMissingOfType.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert special constants to NA of desired type — toMissingOfType","text":"x single element. type Type atomic vector returned.","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/reference/toMissingOfType.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert special constants to NA of desired type — toMissingOfType","text":"Special constants (NULL, Inf, -Inf, NaN,  NA) converted NA desired type. function vectorized, therefore scalar values entered.","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/reference/toMissingOfType.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert special constants to NA of desired type — toMissingOfType","text":"","code":"toMissingOfType(NA, type = \"real\") #> [1] NA toMissingOfType(NULL, type = \"integer\") #> [1] NA"},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/reference/validateEnumValue.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if value is in the given enum. If not, stops with an error. — validateEnumValue","title":"Check if value is in the given enum. If not, stops with an error. — validateEnumValue","text":"Check value given enum. , stops error.","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/reference/validateEnumValue.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if value is in the given enum. If not, stops with an error. — validateEnumValue","text":"","code":"validateEnumValue(value, enum, nullAllowed = FALSE)"},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/reference/validateEnumValue.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if value is in the given enum. If not, stops with an error. — validateEnumValue","text":"value value search enum. enum enum value contained. nullAllowed TRUE, value can NULL test always passes. FALSE (default), NULL accepted test fails.","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/reference/validateEnumValue.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if value is in the given enum. If not, stops with an error. — validateEnumValue","text":"","code":"Symbol <- enum(c(Diamond = 1, Triangle = 2, Circle = 2)) validateEnumValue(1, Symbol) #> NULL"},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/reference/validateIsOfType.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if the provided object is of certain type. If not, stop with an error. — validateIsOfType","title":"Check if the provided object is of certain type. If not, stop with an error. — validateIsOfType","text":"Check provided object certain type. , stop error.","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/reference/validateIsOfType.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if the provided object is of certain type. If not, stop with an error. — validateIsOfType","text":"","code":"validateIsOfType(object, type, nullAllowed = FALSE)  validateIsCharacter(object, nullAllowed = FALSE)  validateIsString(object, nullAllowed = FALSE)  validateIsNumeric(object, nullAllowed = FALSE)  validateIsInteger(object, nullAllowed = FALSE)  validateIsLogical(object, nullAllowed = FALSE)"},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/reference/validateIsOfType.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if the provided object is of certain type. If not, stop with an error. — validateIsOfType","text":"object object atomic vector list objects. type single string vector string representation class type checked . nullAllowed Boolean flag NULL accepted object. TRUE, NULL always returns TRUE, otherwise NULL returns FALSE. Default FALSE.","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/reference/validateIsOfType.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if the provided object is of certain type. If not, stop with an error. — validateIsOfType","text":"NULL entered object expected type, otherwise produces error. Also accepts NULL input nullAllowed argument set TRUE.","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/reference/validateIsOfType.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if the provided object is of certain type. If not, stop with an error. — validateIsOfType","text":"","code":"A <- data.frame(   col1 = c(1, 2, 3),   col2 = c(4, 5, 6),   col3 = c(7, 8, 9) )  validateIsOfType(A, \"data.frame\") #> NULL validateIsInteger(5) #> NULL validateIsNumeric(1.2) #> NULL validateIsCharacter(\"x\") #> NULL validateIsLogical(TRUE) #> NULL"},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/reference/validatePathIsAbsolute.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if path is absolute — validatePathIsAbsolute","title":"Check if path is absolute — validatePathIsAbsolute","text":"Relative paths detected based presence wildcard character(*) path specification.","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/reference/validatePathIsAbsolute.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if path is absolute — validatePathIsAbsolute","text":"","code":"validatePathIsAbsolute(path)"},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/reference/validatePathIsAbsolute.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if path is absolute — validatePathIsAbsolute","text":"path valid file path name.","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/reference/validatePathIsAbsolute.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if path is absolute — validatePathIsAbsolute","text":"Error case relative path found, otherwise output returned.","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/reference/validatePathIsAbsolute.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if path is absolute — validatePathIsAbsolute","text":"","code":"# no error if path is absolute validatePathIsAbsolute(\"Organism|path\") #> NULL  # error otherwise # validatePathIsAbsolute(\"Organism|*path\")"},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/news/index.html","id":"ospsuiteutils-150","dir":"Changelog","previous_headings":"","what":"ospsuite.utils 1.5.0","title":"ospsuite.utils 1.5.0","text":"NEW FUNCTIONS logSafe() compute logarithm values close 0 slightly negative. foldSafe() compute x / y x y negative zero. values certain threshold epsilon substituted epsilon. NOTE: suited calculating fold differences negative numbers. BUG FIXES print function Printable class now converts values using format function printing. E.g., numerical value “0.99999999” displayed “1”. https://github.com/Open-Systems-Pharmacology/OSPSuite.RUtils/issues/120","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/news/index.html","id":"ospsuiteutils-1423","dir":"Changelog","previous_headings":"","what":"ospsuite.utils 1.4.23","title":"ospsuite.utils 1.4.23","text":"NEW FUNCTIONS ifEqual() ifIncluded() conditional values. flattenList() flatten list atomic vector desired type. toMissingOfType() convert special constants (NULL, Inf, NA, etc.) NA desired type.","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/news/index.html","id":"ospsuiteutils-130","dir":"Changelog","previous_headings":"","what":"ospsuite.utils 1.3.0","title":"ospsuite.utils 1.3.0","text":"NEW FUNCTIONS hasEmptyStrings() validateHasOnlyNonEmptyStrings() check empty strings. objectCount count number objects. validateHasOnlyDistinctValues() validate unique values present. validateIsFileExtension() validate file extensions. MAJOR CHANGES Cloning method now disabled Printable R6 class. entails cloneable property set Printable’s subclasses respected. Previously, case; cloning method available even subclass explicitly set cloneable = FALSE. MINOR CHANGES Michael Sevestre new maintainer. package archived CRAN.","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/news/index.html","id":"ospsuiteutils-120","dir":"Changelog","previous_headings":"","what":"ospsuite.utils 1.2.0","title":"ospsuite.utils 1.2.0","text":"CRAN release: 2022-02-18 MAJOR CHANGES Removes alias hasUniqueValues(). messages used ospsuite package now ospsuit.utils (exported list messages). BUG FIXES Fixes regression isIncluded() previous release inadvertently removed support compound types (#63). NEW FUNCTIONS Adds isEmpty() validateIsNotEmpty() functions validate objects aren’t empty (#58; thanks @pchelle). Adds getOSPSuiteUtilsSetting() function get global settings (see enum ospsuiteUtilsSettingNames supported settings).","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/news/index.html","id":"ospsuiteutils-110","dir":"Changelog","previous_headings":"","what":"ospsuite.utils 1.1.0","title":"ospsuite.utils 1.1.0","text":"CRAN release: 2022-02-09 MAJOR CHANGES isIncluded() now accepts base types valid inputs. formatNumerics() now consistently returns output type \"character\". MINOR CHANGES Improvements documentation. validateIsCharacter() added alias validateIsString() function. getEnumKey() added alias enumGetKey() function. hasOnlyDistinctValues() added alias hasUniqueValues() function. BUG FIXES validateIsInteger() now works lists (#21).","code":""},{"path":"https://www.open-systems-pharmacology.org/OSPSuite.RUtils/news/index.html","id":"ospsuiteutils-100","dir":"Changelog","previous_headings":"","what":"ospsuite.utils 1.0.0","title":"ospsuite.utils 1.0.0","text":"CRAN release: 2021-12-08 Initial release.","code":""}]
